<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
    <Baseline>
        <Title> RJRT - 202209</Title>
        <Description><![CDATA[&lt;enter a description of the baseline here&gt; ]]></Description>
        <GroupRelevance JoinByIntersection="false">
            <SearchComponentPropertyReference PropertyName="Group" Comparison="Contains">
                <SearchText>RJRT</SearchText>
                <Relevance>exists (value of setting "Group" of client) whose (it as string as lowercase contains "RJRT" as lowercase)</Relevance>
            </SearchComponentPropertyReference>
        </GroupRelevance>
        <Category></Category>
        <Source></Source>
        <SourceID></SourceID>
        <SourceSeverity></SourceSeverity>
        <CVENames></CVENames>
        <SANSID></SANSID>
        <MIMEField>
            <Name>x-fixlet-modification-time</Name>
            <Value>Fri, 09 Sep 2022 00:59:36 +0000</Value>
        </MIMEField>
        <Domain>BESC</Domain>
        <BaselineComponentCollection>
            <BaselineComponentGroup>
                <BaselineComponent Name="RHSA-2019:2272 - Python-Urllib3 Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="19227201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "python-urllib3" whose (rpm version record of it < rpm package version record "1.10.2-7.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "python-urllib3" whose (rpm version record of it >= rpm package version record "1.10.2-7.el7" AND architecture of it = "noarch") of rpm) then "python-urllib3-1.10.2-7.el7.noarch" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "python-urllib3" whose (rpm version record of it < rpm package version record "1.10.2-7.el7" AND architecture of it = "noarch") of it AND (not exists package "python-urllib3" whose (rpm version record of it >= rpm package version record "1.10.2-7.el7" AND architecture of it = "noarch") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:1180 - Imagemagick Security, Bug Fix, And Enhancement Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20118001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "ImageMagick" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm AND NOT exists package "ImageMagick" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm) then "ImageMagick-6.9.10.68-3.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "ImageMagick" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "ImageMagick-c++" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm AND NOT exists package "ImageMagick-c++" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm) then "ImageMagick-c++-6.9.10.68-3.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "ImageMagick-c++" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick-c++" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-c++-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "ImageMagick-c++-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm AND NOT exists package "ImageMagick-c++-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm) then "ImageMagick-c++-devel-6.9.10.68-3.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "ImageMagick-c++-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick-c++-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-c++-devel-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "ImageMagick-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm AND NOT exists package "ImageMagick-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of rpm) then "ImageMagick-devel-6.9.10.68-3.el7.i686" else ""}"
    parameter "t7" = "{if (exists package "ImageMagick-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-devel-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "ImageMagick-doc" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick-doc" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-doc-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t9" = "{if (exists package "ImageMagick-perl" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ImageMagick-perl" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of rpm) then "ImageMagick-perl-6.9.10.68-3.el7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "autotrace" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of rpm AND NOT exists package "autotrace" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of rpm) then "autotrace-0.31.1-38.el7.i686" else ""}"
    parameter "t11" = "{if (exists package "autotrace" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "autotrace" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of rpm) then "autotrace-0.31.1-38.el7.x86_64" else ""}"
    parameter "t12" = "{if (exists package "autotrace-devel" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of rpm AND NOT exists package "autotrace-devel" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of rpm) then "autotrace-devel-0.31.1-38.el7.i686" else ""}"
    parameter "t13" = "{if (exists package "autotrace-devel" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "autotrace-devel" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of rpm) then "autotrace-devel-0.31.1-38.el7.x86_64" else ""}"
    parameter "t14" = "{if (exists package "emacs" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "emacs" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm) then "emacs-24.3-23.el7.x86_64" else ""}"
    parameter "t15" = "{if (exists package "emacs-common" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "emacs-common" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm) then "emacs-common-24.3-23.el7.x86_64" else ""}"
    parameter "t16" = "{if (exists package "emacs-el" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "emacs-el" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm) then "emacs-el-24.3-23.el7.noarch" else ""}"
    parameter "t17" = "{if (exists package "emacs-filesystem" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "emacs-filesystem" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm) then "emacs-filesystem-24.3-23.el7.noarch" else ""}"
    parameter "t18" = "{if (exists package "emacs-nox" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "emacs-nox" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of rpm) then "emacs-nox-24.3-23.el7.x86_64" else ""}"
    parameter "t19" = "{if (exists package "emacs-terminal" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "emacs-terminal" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of rpm) then "emacs-terminal-24.3-23.el7.noarch" else ""}"
    parameter "t20" = "{if (exists package "inkscape" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "inkscape" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm) then "inkscape-0.92.2-3.el7.x86_64" else ""}"
    parameter "t21" = "{if (exists package "inkscape-docs" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "inkscape-docs" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm) then "inkscape-docs-0.92.2-3.el7.x86_64" else ""}"
    parameter "t22" = "{if (exists package "inkscape-view" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "inkscape-view" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of rpm) then "inkscape-view-0.92.2-3.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21" & " " & parameter "t22"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "ImageMagick" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it AND (not exists package "ImageMagick" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it))  OR (exists package "ImageMagick" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "ImageMagick-c++" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it AND (not exists package "ImageMagick-c++" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it))  OR (exists package "ImageMagick-c++" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick-c++" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "ImageMagick-c++-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it AND (not exists package "ImageMagick-c++-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it))  OR (exists package "ImageMagick-c++-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick-c++-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "ImageMagick-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it AND (not exists package "ImageMagick-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "i686") of it))  OR (exists package "ImageMagick-devel" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick-devel" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "ImageMagick-doc" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick-doc" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "ImageMagick-perl" whose (rpm version record of it < rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "ImageMagick-perl" whose (rpm version record of it >= rpm package version record "6.9.10.68-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "autotrace" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of it AND (not exists package "autotrace" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of it))  OR (exists package "autotrace" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of it AND (not exists package "autotrace" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of it))  OR (exists package "autotrace-devel" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of it AND (not exists package "autotrace-devel" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "i686") of it))  OR (exists package "autotrace-devel" whose (rpm version record of it < rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of it AND (not exists package "autotrace-devel" whose (rpm version record of it >= rpm package version record "0.31.1-38.el7" AND architecture of it = "x86_64") of it))  OR (exists package "emacs" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it AND (not exists package "emacs" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it))  OR (exists package "emacs-common" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it AND (not exists package "emacs-common" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it))  OR (exists package "emacs-el" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it AND (not exists package "emacs-el" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it))  OR (exists package "emacs-filesystem" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it AND (not exists package "emacs-filesystem" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it))  OR (exists package "emacs-nox" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it AND (not exists package "emacs-nox" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "x86_64") of it))  OR (exists package "emacs-terminal" whose (rpm version record of it < rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it AND (not exists package "emacs-terminal" whose (rpm version record of it >= rpm package version record "1:24.3-23.el7" AND architecture of it = "noarch") of it))  OR (exists package "inkscape" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "inkscape" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "inkscape-docs" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "inkscape-docs" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it))  OR (exists package "inkscape-view" whose (rpm version record of it < rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it AND (not exists package "inkscape-view" whose (rpm version record of it >= rpm package version record "0.92.2-3.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3217 - Grub2 Security And Bug Fix Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20321702" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "fwupdate" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "fwupdate" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm) then "fwupdate-12-6.el7_8.x86_64" else ""}"
    parameter "t1" = "{if (exists package "fwupdate-devel" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "fwupdate-devel" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm) then "fwupdate-devel-12-6.el7_8.x86_64" else ""}"
    parameter "t2" = "{if (exists package "fwupdate-efi" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "fwupdate-efi" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm) then "fwupdate-efi-12-6.el7_8.x86_64" else ""}"
    parameter "t3" = "{if (exists package "fwupdate-libs" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "fwupdate-libs" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of rpm) then "fwupdate-libs-12-6.el7_8.x86_64" else ""}"
    parameter "t4" = "{if (exists package "grub2" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t5" = "{if (exists package "grub2-common" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-common" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-common-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t6" = "{if (exists package "grub2-efi-aa64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-efi-aa64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-efi-aa64-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t7" = "{if (exists package "grub2-efi-ia32" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-efi-ia32" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-efi-ia32-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t8" = "{if (exists package "grub2-efi-ia32-cdboot" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-efi-ia32-cdboot" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-efi-ia32-cdboot-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t9" = "{if (exists package "grub2-efi-ia32-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-efi-ia32-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-efi-ia32-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t10" = "{if (exists package "grub2-efi-x64" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-efi-x64" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-efi-x64-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t11" = "{if (exists package "grub2-efi-x64-cdboot" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-efi-x64-cdboot" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-efi-x64-cdboot-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t12" = "{if (exists package "grub2-efi-x64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-efi-x64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-efi-x64-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t13" = "{if (exists package "grub2-pc" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-pc" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-pc-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t14" = "{if (exists package "grub2-pc-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-pc-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-pc-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t15" = "{if (exists package "grub2-ppc-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-ppc-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-ppc-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t16" = "{if (exists package "grub2-ppc64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-ppc64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-ppc64-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t17" = "{if (exists package "grub2-ppc64le-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm AND NOT exists package "grub2-ppc64le-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of rpm) then "grub2-ppc64le-modules-2.02-0.86.el7_8.noarch" else ""}"
    parameter "t18" = "{if (exists package "grub2-tools" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-tools" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-tools-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t19" = "{if (exists package "grub2-tools-extra" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-tools-extra" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-tools-extra-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t20" = "{if (exists package "grub2-tools-minimal" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "grub2-tools-minimal" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of rpm) then "grub2-tools-minimal-2.02-0.86.el7_8.x86_64" else ""}"
    parameter "t21" = "{if (exists package "mokutil" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "mokutil" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm) then "mokutil-15-7.el7_8.x86_64" else ""}"
    parameter "t22" = "{if (exists package "shim-ia32" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "shim-ia32" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm) then "shim-ia32-15-7.el7_8.x86_64" else ""}"
    parameter "t23" = "{if (exists package "shim-unsigned-ia32" whose (rpm version record of it < rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "shim-unsigned-ia32" whose (rpm version record of it >= rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of rpm) then "shim-unsigned-ia32-15-7.el7_9.x86_64" else ""}"
    parameter "t24" = "{if (exists package "shim-unsigned-x64" whose (rpm version record of it < rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "shim-unsigned-x64" whose (rpm version record of it >= rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of rpm) then "shim-unsigned-x64-15-7.el7_9.x86_64" else ""}"
    parameter "t25" = "{if (exists package "shim-x64" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm AND NOT exists package "shim-x64" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of rpm) then "shim-x64-15-7.el7_8.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21" & " " & parameter "t22" & " " & parameter "t23" & " " & parameter "t24" & " " & parameter "t25"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "fwupdate" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "fwupdate" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "fwupdate-devel" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "fwupdate-devel" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "fwupdate-efi" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "fwupdate-efi" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "fwupdate-libs" whose (rpm version record of it < rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "fwupdate-libs" whose (rpm version record of it >= rpm package version record "12-6.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-common" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-common" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-efi-aa64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-efi-aa64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-efi-ia32" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-efi-ia32" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-efi-ia32-cdboot" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-efi-ia32-cdboot" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-efi-ia32-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-efi-ia32-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-efi-x64" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-efi-x64" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-efi-x64-cdboot" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-efi-x64-cdboot" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-efi-x64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-efi-x64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-pc" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-pc" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-pc-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-pc-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-ppc-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-ppc-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-ppc64-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-ppc64-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-ppc64le-modules" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it AND (not exists package "grub2-ppc64le-modules" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "noarch") of it))  OR (exists package "grub2-tools" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-tools" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-tools-extra" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-tools-extra" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "grub2-tools-minimal" whose (rpm version record of it < rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "grub2-tools-minimal" whose (rpm version record of it >= rpm package version record "1:2.02-0.86.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "mokutil" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "mokutil" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "shim-ia32" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "shim-ia32" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it))  OR (exists package "shim-unsigned-ia32" whose (rpm version record of it < rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "shim-unsigned-ia32" whose (rpm version record of it >= rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "shim-unsigned-x64" whose (rpm version record of it < rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "shim-unsigned-x64" whose (rpm version record of it >= rpm package version record "15-7.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "shim-x64" whose (rpm version record of it < rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it AND (not exists package "shim-x64" whose (rpm version record of it >= rpm package version record "15-7.el7_8" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3864 - Cups Security And Bug Fix Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20386401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "cups" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-1.6.3-51.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "cups-client" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups-client" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-client-1.6.3-51.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "cups-devel" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of rpm AND NOT exists package "cups-devel" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of rpm) then "cups-devel-1.6.3-51.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "cups-devel" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups-devel" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-devel-1.6.3-51.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "cups-filesystem" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "cups-filesystem" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "noarch") of rpm) then "cups-filesystem-1.6.3-51.el7.noarch" else ""}"
    parameter "t5" = "{if (exists package "cups-ipptool" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups-ipptool" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-ipptool-1.6.3-51.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "cups-libs" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of rpm AND NOT exists package "cups-libs" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of rpm) then "cups-libs-1.6.3-51.el7.i686" else ""}"
    parameter "t7" = "{if (exists package "cups-libs" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups-libs" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-libs-1.6.3-51.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "cups-lpd" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cups-lpd" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of rpm) then "cups-lpd-1.6.3-51.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "cups" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it))  OR (exists package "cups-client" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups-client" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it))  OR (exists package "cups-devel" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of it AND (not exists package "cups-devel" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of it))  OR (exists package "cups-devel" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups-devel" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it))  OR (exists package "cups-filesystem" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "noarch") of it AND (not exists package "cups-filesystem" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "noarch") of it))  OR (exists package "cups-ipptool" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups-ipptool" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it))  OR (exists package "cups-libs" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of it AND (not exists package "cups-libs" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "i686") of it))  OR (exists package "cups-libs" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups-libs" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it))  OR (exists package "cups-lpd" whose (rpm version record of it < rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it AND (not exists package "cups-lpd" whose (rpm version record of it >= rpm package version record "1:1.6.3-51.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3901 - Libpng Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20390101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-1.5.13-8.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-1.5.13-8.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-devel-1.5.13-8.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-devel-1.5.13-8.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-static-1.5.13-8.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-static-1.5.13-8.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it))  OR (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it))  OR (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it))  OR (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:3901 - Libpng Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20390101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-1.5.13-8.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-1.5.13-8.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-devel-1.5.13-8.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-devel-1.5.13-8.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of rpm) then "libpng-static-1.5.13-8.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of rpm) then "libpng-static-1.5.13-8.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it)) OR (exists package "libpng" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it)) OR (exists package "libpng-devel" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng-devel" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it AND (not exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "i686") of it)) OR (exists package "libpng-static" whose (rpm version record of it < rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it AND (not exists package "libpng-static" whose (rpm version record of it >= rpm package version record "2:1.5.13-8.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3902 - Libtiff Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20390201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-4.0.3-35.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-4.0.3-35.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-devel-4.0.3-35.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-devel-4.0.3-35.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-static-4.0.3-35.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-static-4.0.3-35.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "libtiff-tools" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-tools" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-tools-4.0.3-35.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it))  OR (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it))  OR (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it))  OR (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libtiff-tools" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-tools" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:3902 - Libtiff Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20390201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-4.0.3-35.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-4.0.3-35.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-devel-4.0.3-35.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-devel-4.0.3-35.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of rpm) then "libtiff-static-4.0.3-35.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-static-4.0.3-35.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "libtiff-tools" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libtiff-tools" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of rpm) then "libtiff-tools-4.0.3-35.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it)) OR (exists package "libtiff" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it)) OR (exists package "libtiff-devel" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-devel" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it AND (not exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "i686") of it)) OR (exists package "libtiff-static" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-static" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libtiff-tools" whose (rpm version record of it < rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it AND (not exists package "libtiff-tools" whose (rpm version record of it >= rpm package version record "4.0.3-35.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3908 - Cpio Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20390801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "cpio" whose (rpm version record of it < rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cpio" whose (rpm version record of it >= rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of rpm) then "cpio-2.11-28.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "cpio" whose (rpm version record of it < rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of it AND (not exists package "cpio" whose (rpm version record of it >= rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:3908 - Cpio Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20390801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "cpio" whose (rpm version record of it < rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "cpio" whose (rpm version record of it >= rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of rpm) then "cpio-2.11-28.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "cpio" whose (rpm version record of it < rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of it AND (not exists package "cpio" whose (rpm version record of it >= rpm package version record "2.11-28.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:3915 - Libssh2 Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20391501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm) then "libssh2-1.8.0-4.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm) then "libssh2-1.8.0-4.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm) then "libssh2-devel-1.8.0-4.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm) then "libssh2-devel-1.8.0-4.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libssh2-docs" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "libssh2-docs" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of rpm) then "libssh2-docs-1.8.0-4.el7.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it AND (not exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it))  OR (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it AND (not exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it AND (not exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it))  OR (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it AND (not exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libssh2-docs" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of it AND (not exists package "libssh2-docs" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:3915 - Libssh2 Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20391501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm) then "libssh2-1.8.0-4.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm) then "libssh2-1.8.0-4.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of rpm) then "libssh2-devel-1.8.0-4.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of rpm) then "libssh2-devel-1.8.0-4.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libssh2-docs" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "libssh2-docs" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of rpm) then "libssh2-docs-1.8.0-4.el7.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it AND (not exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it)) OR (exists package "libssh2" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it AND (not exists package "libssh2" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it AND (not exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "i686") of it)) OR (exists package "libssh2-devel" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it AND (not exists package "libssh2-devel" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libssh2-docs" whose (rpm version record of it < rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of it AND (not exists package "libssh2-docs" whose (rpm version record of it >= rpm package version record "1.8.0-4.el7" AND architecture of it = "noarch") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4005 - Libxslt Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20400501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libxslt" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libxslt" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of rpm) then "libxslt-1.1.28-6.el7.i686" else ""}"
    parameter "t1" = "{if (exists package "libxslt" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxslt" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm) then "libxslt-1.1.28-6.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libxslt-devel" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libxslt-devel" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of rpm) then "libxslt-devel-1.1.28-6.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "libxslt-devel" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxslt-devel" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm) then "libxslt-devel-1.1.28-6.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libxslt-python" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxslt-python" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of rpm) then "libxslt-python-1.1.28-6.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libxslt" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of it AND (not exists package "libxslt" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of it))  OR (exists package "libxslt" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it AND (not exists package "libxslt" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libxslt-devel" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of it AND (not exists package "libxslt-devel" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "i686") of it))  OR (exists package "libxslt-devel" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it AND (not exists package "libxslt-devel" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libxslt-python" whose (rpm version record of it < rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it AND (not exists package "libxslt-python" whose (rpm version record of it >= rpm package version record "1.1.28-6.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4011 - E2fsprogs Security And Bug Fix Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20401101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "e2fsprogs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-1.42.9-19.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t2" = "{if (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "t3" = "{if (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-libs-1.42.9-19.el7.i686" else ""}"
    parameter "t4" = "{if (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-libs-1.42.9-19.el7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-static-1.42.9-19.el7.i686" else ""}"
    parameter "t6" = "{if (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-static-1.42.9-19.el7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libcom_err-1.42.9-19.el7.i686" else ""}"
    parameter "t8" = "{if (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libcom_err-1.42.9-19.el7.x86_64" else ""}"
    parameter "t9" = "{if (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libcom_err-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t10" = "{if (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libcom_err-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libss-1.42.9-19.el7.i686" else ""}"
    parameter "t12" = "{if (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libss-1.42.9-19.el7.x86_64" else ""}"
    parameter "t13" = "{if (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libss-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t14" = "{if (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libss-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "e2fsprogs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))  OR (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it))  OR (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4011 - E2Fsprogs Security and Bug Fix Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20401101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "e2fsprogs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-1.42.9-19.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t2" = "{if (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "t3" = "{if (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-libs-1.42.9-19.el7.i686" else ""}"
    parameter "t4" = "{if (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-libs-1.42.9-19.el7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "e2fsprogs-static-1.42.9-19.el7.i686" else ""}"
    parameter "t6" = "{if (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "e2fsprogs-static-1.42.9-19.el7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libcom_err-1.42.9-19.el7.i686" else ""}"
    parameter "t8" = "{if (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libcom_err-1.42.9-19.el7.x86_64" else ""}"
    parameter "t9" = "{if (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libcom_err-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t10" = "{if (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libcom_err-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libss-1.42.9-19.el7.i686" else ""}"
    parameter "t12" = "{if (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libss-1.42.9-19.el7.x86_64" else ""}"
    parameter "t13" = "{if (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of rpm) then "libss-devel-1.42.9-19.el7.i686" else ""}"
    parameter "t14" = "{if (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of rpm) then "libss-devel-1.42.9-19.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "e2fsprogs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "e2fsprogs-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "e2fsprogs-libs" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-libs" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "e2fsprogs-static" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "e2fsprogs-static" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "libcom_err" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libcom_err" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "libcom_err-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libcom_err-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "libss" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libss" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it AND (not exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "i686") of it)) OR (exists package "libss-devel" whose (rpm version record of it < rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it AND (not exists package "libss-devel" whose (rpm version record of it >= rpm package version record "1.42.9-19.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4026 - Mariadb Security And Bug Fix Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20402601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "mariadb" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-5.5.68-1.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "mariadb-bench" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-bench" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-bench-5.5.68-1.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-devel-5.5.68-1.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-devel-5.5.68-1.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-embedded-5.5.68-1.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-embedded-5.5.68-1.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-embedded-devel-5.5.68-1.el7.i686" else ""}"
    parameter "t7" = "{if (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-embedded-devel-5.5.68-1.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-libs-5.5.68-1.el7.i686" else ""}"
    parameter "t9" = "{if (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-libs-5.5.68-1.el7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "mariadb-server" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-server" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-server-5.5.68-1.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "mariadb-test" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-test" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-test-5.5.68-1.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "mariadb" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-bench" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-bench" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it))  OR (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it))  OR (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it))  OR (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it))  OR (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-server" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-server" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "mariadb-test" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-test" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4026 - Mariadb Security and Bug Fix Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20402601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "mariadb" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-5.5.68-1.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "mariadb-bench" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-bench" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-bench-5.5.68-1.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-devel-5.5.68-1.el7.i686" else ""}"
    parameter "t3" = "{if (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-devel-5.5.68-1.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-embedded-5.5.68-1.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-embedded-5.5.68-1.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-embedded-devel-5.5.68-1.el7.i686" else ""}"
    parameter "t7" = "{if (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-embedded-devel-5.5.68-1.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm AND NOT exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of rpm) then "mariadb-libs-5.5.68-1.el7.i686" else ""}"
    parameter "t9" = "{if (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-libs-5.5.68-1.el7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "mariadb-server" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-server" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-server-5.5.68-1.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "mariadb-test" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "mariadb-test" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of rpm) then "mariadb-test-5.5.68-1.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "mariadb" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-bench" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-bench" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it)) OR (exists package "mariadb-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it)) OR (exists package "mariadb-embedded" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-embedded" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it)) OR (exists package "mariadb-embedded-devel" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-embedded-devel" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it AND (not exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "i686") of it)) OR (exists package "mariadb-libs" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-libs" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-server" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-server" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "mariadb-test" whose (rpm version record of it < rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it AND (not exists package "mariadb-test" whose (rpm version record of it >= rpm package version record "1:5.5.68-1.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4032 - Dbus Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20403201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "dbus" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-1.10.24-15.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm AND NOT exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm) then "dbus-devel-1.10.24-15.el7.i686" else ""}"
    parameter "t2" = "{if (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-devel-1.10.24-15.el7.x86_64" else ""}"
    parameter "t3" = "{if (exists package "dbus-doc" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "dbus-doc" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of rpm) then "dbus-doc-1.10.24-15.el7.noarch" else ""}"
    parameter "t4" = "{if (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm AND NOT exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm) then "dbus-libs-1.10.24-15.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-libs-1.10.24-15.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "dbus-tests" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-tests" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-tests-1.10.24-15.el7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "dbus-x11" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-x11" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-x11-1.10.24-15.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "dbus" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it))  OR (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it AND (not exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it))  OR (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it))  OR (exists package "dbus-doc" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of it AND (not exists package "dbus-doc" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of it))  OR (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it AND (not exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it))  OR (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it))  OR (exists package "dbus-tests" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-tests" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it))  OR (exists package "dbus-x11" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-x11" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4032 - Dbus Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20403201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "dbus" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-1.10.24-15.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm AND NOT exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm) then "dbus-devel-1.10.24-15.el7.i686" else ""}"
    parameter "t2" = "{if (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-devel-1.10.24-15.el7.x86_64" else ""}"
    parameter "t3" = "{if (exists package "dbus-doc" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "dbus-doc" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of rpm) then "dbus-doc-1.10.24-15.el7.noarch" else ""}"
    parameter "t4" = "{if (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm AND NOT exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of rpm) then "dbus-libs-1.10.24-15.el7.i686" else ""}"
    parameter "t5" = "{if (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-libs-1.10.24-15.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "dbus-tests" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-tests" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-tests-1.10.24-15.el7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "dbus-x11" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "dbus-x11" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of rpm) then "dbus-x11-1.10.24-15.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart
]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "dbus" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it)) OR (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it AND (not exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it)) OR (exists package "dbus-devel" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-devel" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it)) OR (exists package "dbus-doc" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of it AND (not exists package "dbus-doc" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "noarch") of it)) OR (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it AND (not exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "i686") of it)) OR (exists package "dbus-libs" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-libs" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it)) OR (exists package "dbus-tests" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-tests" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it)) OR (exists package "dbus-x11" whose (rpm version record of it < rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it AND (not exists package "dbus-x11" whose (rpm version record of it >= rpm package version record "1:1.10.24-15.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4072 - Libcroco Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20407201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm) then "libcroco-0.6.12-6.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm) then "libcroco-0.6.12-6.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm) then "libcroco-devel-0.6.12-6.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm) then "libcroco-devel-0.6.12-6.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4072 - Libcroco Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20407201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm) then "libcroco-0.6.12-6.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm) then "libcroco-0.6.12-6.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of rpm) then "libcroco-devel-0.6.12-6.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of rpm) then "libcroco-devel-0.6.12-6.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libcroco" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libcroco" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libcroco-devel" whose (rpm version record of it < rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libcroco-devel" whose (rpm version record of it >= rpm package version record "0.6.12-6.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4076 - Nss and Nspr Security, Bug Fix, and Enhancement Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20407601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "nspr" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nspr" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of rpm) then "nspr-4.25.0-2.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "nspr" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nspr" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of rpm) then "nspr-4.25.0-2.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "nspr-devel" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nspr-devel" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of rpm) then "nspr-devel-4.25.0-2.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "nspr-devel" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nspr-devel" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of rpm) then "nspr-devel-4.25.0-2.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm) then "nss-3.53.1-3.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-3.53.1-3.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm) then "nss-devel-3.53.1-3.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-devel-3.53.1-3.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of rpm) then "nss-pkcs11-devel-3.53.1-3.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-pkcs11-devel-3.53.1-3.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "nss-softokn" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-softokn" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm) then "nss-softokn-3.53.1-6.el7_9.i686" else ""}"
    parameter "t11" = "{if (exists package "nss-softokn" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-softokn" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-softokn-3.53.1-6.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "nss-softokn-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-softokn-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm) then "nss-softokn-devel-3.53.1-6.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "nss-softokn-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-softokn-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-softokn-devel-3.53.1-6.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "nss-softokn-freebl" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-softokn-freebl" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm) then "nss-softokn-freebl-3.53.1-6.el7_9.i686" else ""}"
    parameter "t15" = "{if (exists package "nss-softokn-freebl" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-softokn-freebl" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-softokn-freebl-3.53.1-6.el7_9.x86_64" else ""}"
    parameter "t16" = "{if (exists package "nss-softokn-freebl-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-softokn-freebl-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of rpm) then "nss-softokn-freebl-devel-3.53.1-6.el7_9.i686" else ""}"
    parameter "t17" = "{if (exists package "nss-softokn-freebl-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-softokn-freebl-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-softokn-freebl-devel-3.53.1-6.el7_9.x86_64" else ""}"
    parameter "t18" = "{if (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-sysinit-3.53.1-3.el7_9.x86_64" else ""}"
    parameter "t19" = "{if (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-tools-3.53.1-3.el7_9.x86_64" else ""}"
    parameter "t20" = "{if (exists package "nss-util" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-util" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of rpm) then "nss-util-3.53.1-1.el7_9.i686" else ""}"
    parameter "t21" = "{if (exists package "nss-util" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-util" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-util-3.53.1-1.el7_9.x86_64" else ""}"
    parameter "t22" = "{if (exists package "nss-util-devel" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-util-devel" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of rpm) then "nss-util-devel-3.53.1-1.el7_9.i686" else ""}"
    parameter "t23" = "{if (exists package "nss-util-devel" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-util-devel" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-util-devel-3.53.1-1.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21" & " " & parameter "t22" & " " & parameter "t23"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "nspr" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "nspr" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nspr" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nspr" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nspr-devel" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "nspr-devel" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nspr-devel" whose (rpm version record of it < rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nspr-devel" whose (rpm version record of it >= rpm package version record "4.25.0-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-softokn" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-softokn" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-softokn" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-softokn" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-softokn-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-softokn-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-softokn-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-softokn-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-softokn-freebl" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-softokn-freebl" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-softokn-freebl" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-softokn-freebl" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-softokn-freebl-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-softokn-freebl-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-softokn-freebl-devel" whose (rpm version record of it < rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-softokn-freebl-devel" whose (rpm version record of it >= rpm package version record "3.53.1-6.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.53.1-3.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-util" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-util" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-util" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-util" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-util-devel" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-util-devel" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-util-devel" whose (rpm version record of it < rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-util-devel" whose (rpm version record of it >= rpm package version record "3.53.1-1.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:4907 - Freetype Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20490701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm) then "freetype-2.8-14.el7_9.1.i686" else ""}"
    parameter "t1" = "{if (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "freetype-demos" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype-demos" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-demos-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm) then "freetype-devel-2.8-14.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-devel-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "freetype-demos" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype-demos" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:4907 - Freetype Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20490701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm) then "freetype-2.8-14.el7_9.1.i686" else ""}"
    parameter "t1" = "{if (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "freetype-demos" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype-demos" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-demos-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of rpm) then "freetype-devel-2.8-14.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of rpm) then "freetype-devel-2.8-14.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "freetype" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "freetype-demos" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype-demos" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "freetype-devel" whose (rpm version record of it < rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "freetype-devel" whose (rpm version record of it >= rpm package version record "2.8-14.el7_9.1" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2020:5002 - Curl Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="20500201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "curl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "curl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "curl-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm) then "libcurl-7.29.0-59.el7_9.1.i686" else ""}"
    parameter "t2" = "{if (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "libcurl-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm) then "libcurl-devel-7.29.0-59.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "libcurl-devel-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "curl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "curl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:5002 - Curl Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20500201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "curl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "curl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "curl-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm) then "libcurl-7.29.0-59.el7_9.1.i686" else ""}"
    parameter "t2" = "{if (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "libcurl-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of rpm) then "libcurl-devel-7.29.0-59.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of rpm) then "libcurl-devel-7.29.0-59.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "curl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "curl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "libcurl" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "libcurl" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "libcurl-devel" whose (rpm version record of it < rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "libcurl-devel" whose (rpm version record of it >= rpm package version record "7.29.0-59.el7_9.1" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2020:5350 - Net-Snmp Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="20535001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "net-snmp" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "net-snmp-agent-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "net-snmp-agent-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm) then "net-snmp-agent-libs-5.7.2-49.el7_9.1.i686" else ""}"
    parameter "t2" = "{if (exists package "net-snmp-agent-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-agent-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-agent-libs-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "net-snmp-devel" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "net-snmp-devel" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm) then "net-snmp-devel-5.7.2-49.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "net-snmp-devel" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-devel" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-devel-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t5" = "{if (exists package "net-snmp-gui" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-gui" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-gui-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t6" = "{if (exists package "net-snmp-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "net-snmp-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of rpm) then "net-snmp-libs-5.7.2-49.el7_9.1.i686" else ""}"
    parameter "t7" = "{if (exists package "net-snmp-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-libs-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t8" = "{if (exists package "net-snmp-perl" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-perl" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-perl-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t9" = "{if (exists package "net-snmp-python" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-python" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-python-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t10" = "{if (exists package "net-snmp-sysvinit" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-sysvinit" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-sysvinit-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "t11" = "{if (exists package "net-snmp-utils" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "net-snmp-utils" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of rpm) then "net-snmp-utils-5.7.2-49.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "net-snmp" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-agent-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "net-snmp-agent-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "net-snmp-agent-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-agent-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-devel" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "net-snmp-devel" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "net-snmp-devel" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-devel" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-gui" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-gui" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "net-snmp-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "net-snmp-libs" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-libs" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-perl" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-perl" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-python" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-python" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-sysvinit" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-sysvinit" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "net-snmp-utils" whose (rpm version record of it < rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "net-snmp-utils" whose (rpm version record of it >= rpm package version record "1:5.7.2-49.el7_9.1" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:0339 - Linux-Firmware Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21033901" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "iwl100-firmware" whose (rpm version record of it < rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl100-firmware" whose (rpm version record of it >= rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl100-firmware-39.31.5.1-80.el7_9.noarch" else ""}"
    parameter "t1" = "{if (exists package "iwl1000-firmware" whose (rpm version record of it < rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl1000-firmware" whose (rpm version record of it >= rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl1000-firmware-39.31.5.1-80.el7_9.noarch" else ""}"
    parameter "t2" = "{if (exists package "iwl105-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl105-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl105-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "iwl135-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl135-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl135-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t4" = "{if (exists package "iwl2000-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl2000-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl2000-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t5" = "{if (exists package "iwl2030-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl2030-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl2030-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "iwl3160-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl3160-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl3160-firmware-25.30.13.0-80.el7_9.noarch" else ""}"
    parameter "t7" = "{if (exists package "iwl3945-firmware" whose (rpm version record of it < rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl3945-firmware" whose (rpm version record of it >= rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl3945-firmware-15.32.2.9-80.el7_9.noarch" else ""}"
    parameter "t8" = "{if (exists package "iwl4965-firmware" whose (rpm version record of it < rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl4965-firmware" whose (rpm version record of it >= rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl4965-firmware-228.61.2.24-80.el7_9.noarch" else ""}"
    parameter "t9" = "{if (exists package "iwl5000-firmware" whose (rpm version record of it < rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl5000-firmware" whose (rpm version record of it >= rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl5000-firmware-8.83.5.1_1-80.el7_9.noarch" else ""}"
    parameter "t10" = "{if (exists package "iwl5150-firmware" whose (rpm version record of it < rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl5150-firmware" whose (rpm version record of it >= rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl5150-firmware-8.24.2.2-80.el7_9.noarch" else ""}"
    parameter "t11" = "{if (exists package "iwl6000-firmware" whose (rpm version record of it < rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000-firmware" whose (rpm version record of it >= rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000-firmware-9.221.4.1-80.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "iwl6000g2a-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000g2a-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000g2a-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t13" = "{if (exists package "iwl6000g2b-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000g2b-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000g2b-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t14" = "{if (exists package "iwl6050-firmware" whose (rpm version record of it < rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6050-firmware" whose (rpm version record of it >= rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6050-firmware-41.28.5.1-80.el7_9.noarch" else ""}"
    parameter "t15" = "{if (exists package "iwl7260-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl7260-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl7260-firmware-25.30.13.0-80.el7_9.noarch" else ""}"
    parameter "t16" = "{if (exists package "linux-firmware" whose (rpm version record of it < rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "linux-firmware" whose (rpm version record of it >= rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of rpm) then "linux-firmware-20200421-80.git78c0348.el7_9.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "iwl100-firmware" whose (rpm version record of it < rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl100-firmware" whose (rpm version record of it >= rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl1000-firmware" whose (rpm version record of it < rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl1000-firmware" whose (rpm version record of it >= rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl105-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl105-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl135-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl135-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl2000-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl2000-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl2030-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl2030-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl3160-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl3160-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl3945-firmware" whose (rpm version record of it < rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl3945-firmware" whose (rpm version record of it >= rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl4965-firmware" whose (rpm version record of it < rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl4965-firmware" whose (rpm version record of it >= rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl5000-firmware" whose (rpm version record of it < rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl5000-firmware" whose (rpm version record of it >= rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl5150-firmware" whose (rpm version record of it < rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl5150-firmware" whose (rpm version record of it >= rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl6000-firmware" whose (rpm version record of it < rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000-firmware" whose (rpm version record of it >= rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl6000g2a-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000g2a-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl6000g2b-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000g2b-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl6050-firmware" whose (rpm version record of it < rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6050-firmware" whose (rpm version record of it >= rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "iwl7260-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl7260-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "linux-firmware" whose (rpm version record of it < rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of it AND (not exists package "linux-firmware" whose (rpm version record of it >= rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:0339 - Linux-Firmware Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21033901" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "iwl1000-firmware" whose (rpm version record of it < rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl1000-firmware" whose (rpm version record of it >= rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl1000-firmware-39.31.5.1-80.el7_9.noarch" else ""}"
    parameter "t1" = "{if (exists package "iwl100-firmware" whose (rpm version record of it < rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl100-firmware" whose (rpm version record of it >= rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl100-firmware-39.31.5.1-80.el7_9.noarch" else ""}"
    parameter "t2" = "{if (exists package "iwl105-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl105-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl105-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "iwl135-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl135-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl135-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t4" = "{if (exists package "iwl2000-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl2000-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl2000-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t5" = "{if (exists package "iwl2030-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl2030-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl2030-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "iwl3160-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl3160-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl3160-firmware-25.30.13.0-80.el7_9.noarch" else ""}"
    parameter "t7" = "{if (exists package "iwl3945-firmware" whose (rpm version record of it < rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl3945-firmware" whose (rpm version record of it >= rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl3945-firmware-15.32.2.9-80.el7_9.noarch" else ""}"
    parameter "t8" = "{if (exists package "iwl4965-firmware" whose (rpm version record of it < rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl4965-firmware" whose (rpm version record of it >= rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl4965-firmware-228.61.2.24-80.el7_9.noarch" else ""}"
    parameter "t9" = "{if (exists package "iwl5000-firmware" whose (rpm version record of it < rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl5000-firmware" whose (rpm version record of it >= rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl5000-firmware-8.83.5.1_1-80.el7_9.noarch" else ""}"
    parameter "t10" = "{if (exists package "iwl5150-firmware" whose (rpm version record of it < rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl5150-firmware" whose (rpm version record of it >= rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl5150-firmware-8.24.2.2-80.el7_9.noarch" else ""}"
    parameter "t11" = "{if (exists package "iwl6000-firmware" whose (rpm version record of it < rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000-firmware" whose (rpm version record of it >= rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000-firmware-9.221.4.1-80.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "iwl6000g2a-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000g2a-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000g2a-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t13" = "{if (exists package "iwl6000g2b-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6000g2b-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6000g2b-firmware-18.168.6.1-80.el7_9.noarch" else ""}"
    parameter "t14" = "{if (exists package "iwl6050-firmware" whose (rpm version record of it < rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl6050-firmware" whose (rpm version record of it >= rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl6050-firmware-41.28.5.1-80.el7_9.noarch" else ""}"
    parameter "t15" = "{if (exists package "iwl7260-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "iwl7260-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of rpm) then "iwl7260-firmware-25.30.13.0-80.el7_9.noarch" else ""}"
    parameter "t16" = "{if (exists package "linux-firmware" whose (rpm version record of it < rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "linux-firmware" whose (rpm version record of it >= rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of rpm) then "linux-firmware-20200421-80.git78c0348.el7_9.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart
]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "iwl1000-firmware" whose (rpm version record of it < rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl1000-firmware" whose (rpm version record of it >= rpm package version record "1:39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl100-firmware" whose (rpm version record of it < rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl100-firmware" whose (rpm version record of it >= rpm package version record "39.31.5.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl105-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl105-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl135-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl135-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl2000-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl2000-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl2030-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl2030-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl3160-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl3160-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl3945-firmware" whose (rpm version record of it < rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl3945-firmware" whose (rpm version record of it >= rpm package version record "15.32.2.9-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl4965-firmware" whose (rpm version record of it < rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl4965-firmware" whose (rpm version record of it >= rpm package version record "228.61.2.24-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl5000-firmware" whose (rpm version record of it < rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl5000-firmware" whose (rpm version record of it >= rpm package version record "8.83.5.1_1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl5150-firmware" whose (rpm version record of it < rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl5150-firmware" whose (rpm version record of it >= rpm package version record "8.24.2.2-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl6000-firmware" whose (rpm version record of it < rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000-firmware" whose (rpm version record of it >= rpm package version record "9.221.4.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl6000g2a-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000g2a-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl6000g2b-firmware" whose (rpm version record of it < rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6000g2b-firmware" whose (rpm version record of it >= rpm package version record "18.168.6.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl6050-firmware" whose (rpm version record of it < rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl6050-firmware" whose (rpm version record of it >= rpm package version record "41.28.5.1-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "iwl7260-firmware" whose (rpm version record of it < rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it AND (not exists package "iwl7260-firmware" whose (rpm version record of it >= rpm package version record "25.30.13.0-80.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "linux-firmware" whose (rpm version record of it < rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of it AND (not exists package "linux-firmware" whose (rpm version record of it >= rpm package version record "20200421-80.git78c0348.el7_9" AND architecture of it = "noarch") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:0343 - Perl Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21034301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "perl" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "perl-CPAN" whose (rpm version record of it < rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-CPAN" whose (rpm version record of it >= rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-CPAN-1.9800-299.el7_9.noarch" else ""}"
    parameter "t2" = "{if (exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it < rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it >= rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-CBuilder-0.28.2.6-299.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "perl-ExtUtils-Embed" whose (rpm version record of it < rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-Embed" whose (rpm version record of it >= rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-Embed-1.30-299.el7_9.noarch" else ""}"
    parameter "t4" = "{if (exists package "perl-ExtUtils-Install" whose (rpm version record of it < rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-Install" whose (rpm version record of it >= rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-Install-1.58-299.el7_9.noarch" else ""}"
    parameter "t5" = "{if (exists package "perl-IO-Zlib" whose (rpm version record of it < rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-IO-Zlib" whose (rpm version record of it >= rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-IO-Zlib-1.10-299.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it < rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it >= rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Locale-Maketext-Simple-0.21-299.el7_9.noarch" else ""}"
    parameter "t7" = "{if (exists package "perl-Module-CoreList" whose (rpm version record of it < rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Module-CoreList" whose (rpm version record of it >= rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Module-CoreList-2.76.02-299.el7_9.noarch" else ""}"
    parameter "t8" = "{if (exists package "perl-Module-Loaded" whose (rpm version record of it < rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Module-Loaded" whose (rpm version record of it >= rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Module-Loaded-0.08-299.el7_9.noarch" else ""}"
    parameter "t9" = "{if (exists package "perl-Object-Accessor" whose (rpm version record of it < rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Object-Accessor" whose (rpm version record of it >= rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Object-Accessor-0.42-299.el7_9.noarch" else ""}"
    parameter "t10" = "{if (exists package "perl-Package-Constants" whose (rpm version record of it < rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Package-Constants" whose (rpm version record of it >= rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Package-Constants-0.02-299.el7_9.noarch" else ""}"
    parameter "t11" = "{if (exists package "perl-Pod-Escapes" whose (rpm version record of it < rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Pod-Escapes" whose (rpm version record of it >= rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Pod-Escapes-1.04-299.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "perl-Time-Piece" whose (rpm version record of it < rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-Time-Piece" whose (rpm version record of it >= rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-Time-Piece-1.20.1-299.el7_9.x86_64" else ""}"
    parameter "t13" = "{if (exists package "perl-core" whose (rpm version record of it < rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-core" whose (rpm version record of it >= rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-core-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm) then "perl-devel-5.16.3-299.el7_9.i686" else ""}"
    parameter "t15" = "{if (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-devel-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t16" = "{if (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm) then "perl-libs-5.16.3-299.el7_9.i686" else ""}"
    parameter "t17" = "{if (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-libs-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t18" = "{if (exists package "perl-macros" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-macros" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-macros-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t19" = "{if (exists package "perl-tests" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-tests" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-tests-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "perl" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-CPAN" whose (rpm version record of it < rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-CPAN" whose (rpm version record of it >= rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it < rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it >= rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-ExtUtils-Embed" whose (rpm version record of it < rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-Embed" whose (rpm version record of it >= rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-ExtUtils-Install" whose (rpm version record of it < rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-Install" whose (rpm version record of it >= rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-IO-Zlib" whose (rpm version record of it < rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-IO-Zlib" whose (rpm version record of it >= rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it < rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it >= rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Module-CoreList" whose (rpm version record of it < rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Module-CoreList" whose (rpm version record of it >= rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Module-Loaded" whose (rpm version record of it < rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Module-Loaded" whose (rpm version record of it >= rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Object-Accessor" whose (rpm version record of it < rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Object-Accessor" whose (rpm version record of it >= rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Package-Constants" whose (rpm version record of it < rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Package-Constants" whose (rpm version record of it >= rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Pod-Escapes" whose (rpm version record of it < rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Pod-Escapes" whose (rpm version record of it >= rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "perl-Time-Piece" whose (rpm version record of it < rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-Time-Piece" whose (rpm version record of it >= rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-core" whose (rpm version record of it < rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-core" whose (rpm version record of it >= rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it AND (not exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it))  OR (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it AND (not exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it))  OR (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-macros" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-macros" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "perl-tests" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-tests" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:0343 - Perl Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21034301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "perl" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "perl-core" whose (rpm version record of it < rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-core" whose (rpm version record of it >= rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-core-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "perl-CPAN" whose (rpm version record of it < rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-CPAN" whose (rpm version record of it >= rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-CPAN-1.9800-299.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm) then "perl-devel-5.16.3-299.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-devel-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it < rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it >= rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-CBuilder-0.28.2.6-299.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "perl-ExtUtils-Embed" whose (rpm version record of it < rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-Embed" whose (rpm version record of it >= rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-Embed-1.30-299.el7_9.noarch" else ""}"
    parameter "t7" = "{if (exists package "perl-ExtUtils-Install" whose (rpm version record of it < rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-ExtUtils-Install" whose (rpm version record of it >= rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-ExtUtils-Install-1.58-299.el7_9.noarch" else ""}"
    parameter "t8" = "{if (exists package "perl-IO-Zlib" whose (rpm version record of it < rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-IO-Zlib" whose (rpm version record of it >= rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-IO-Zlib-1.10-299.el7_9.noarch" else ""}"
    parameter "t9" = "{if (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of rpm) then "perl-libs-5.16.3-299.el7_9.i686" else ""}"
    parameter "t10" = "{if (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-libs-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it < rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it >= rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Locale-Maketext-Simple-0.21-299.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "perl-macros" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-macros" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-macros-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t13" = "{if (exists package "perl-Module-CoreList" whose (rpm version record of it < rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Module-CoreList" whose (rpm version record of it >= rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Module-CoreList-2.76.02-299.el7_9.noarch" else ""}"
    parameter "t14" = "{if (exists package "perl-Module-Loaded" whose (rpm version record of it < rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Module-Loaded" whose (rpm version record of it >= rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Module-Loaded-0.08-299.el7_9.noarch" else ""}"
    parameter "t15" = "{if (exists package "perl-Object-Accessor" whose (rpm version record of it < rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Object-Accessor" whose (rpm version record of it >= rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Object-Accessor-0.42-299.el7_9.noarch" else ""}"
    parameter "t16" = "{if (exists package "perl-Package-Constants" whose (rpm version record of it < rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Package-Constants" whose (rpm version record of it >= rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Package-Constants-0.02-299.el7_9.noarch" else ""}"
    parameter "t17" = "{if (exists package "perl-Pod-Escapes" whose (rpm version record of it < rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "perl-Pod-Escapes" whose (rpm version record of it >= rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of rpm) then "perl-Pod-Escapes-1.04-299.el7_9.noarch" else ""}"
    parameter "t18" = "{if (exists package "perl-tests" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-tests" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-tests-5.16.3-299.el7_9.x86_64" else ""}"
    parameter "t19" = "{if (exists package "perl-Time-Piece" whose (rpm version record of it < rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "perl-Time-Piece" whose (rpm version record of it >= rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of rpm) then "perl-Time-Piece-1.20.1-299.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "perl" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-core" whose (rpm version record of it < rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-core" whose (rpm version record of it >= rpm package version record "5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-CPAN" whose (rpm version record of it < rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-CPAN" whose (rpm version record of it >= rpm package version record "1.9800-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it AND (not exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it)) OR (exists package "perl-devel" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-devel" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it < rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-CBuilder" whose (rpm version record of it >= rpm package version record "1:0.28.2.6-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-ExtUtils-Embed" whose (rpm version record of it < rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-Embed" whose (rpm version record of it >= rpm package version record "1.30-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-ExtUtils-Install" whose (rpm version record of it < rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-ExtUtils-Install" whose (rpm version record of it >= rpm package version record "1.58-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-IO-Zlib" whose (rpm version record of it < rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-IO-Zlib" whose (rpm version record of it >= rpm package version record "1:1.10-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it AND (not exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "i686") of it)) OR (exists package "perl-libs" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-libs" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it < rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Locale-Maketext-Simple" whose (rpm version record of it >= rpm package version record "1:0.21-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-macros" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-macros" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-Module-CoreList" whose (rpm version record of it < rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Module-CoreList" whose (rpm version record of it >= rpm package version record "1:2.76.02-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-Module-Loaded" whose (rpm version record of it < rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Module-Loaded" whose (rpm version record of it >= rpm package version record "1:0.08-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-Object-Accessor" whose (rpm version record of it < rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Object-Accessor" whose (rpm version record of it >= rpm package version record "1:0.42-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-Package-Constants" whose (rpm version record of it < rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Package-Constants" whose (rpm version record of it >= rpm package version record "1:0.02-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-Pod-Escapes" whose (rpm version record of it < rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of it AND (not exists package "perl-Pod-Escapes" whose (rpm version record of it >= rpm package version record "1:1.04-299.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "perl-tests" whose (rpm version record of it < rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-tests" whose (rpm version record of it >= rpm package version record "4:5.16.3-299.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "perl-Time-Piece" whose (rpm version record of it < rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "perl-Time-Piece" whose (rpm version record of it >= rpm package version record "1.20.1-299.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:0742 - Screen Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21074201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "screen" whose (rpm version record of it < rpm package version record "4.1.0-0.27.20120314git3c2946.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "screen" whose (rpm version record of it >= rpm package version record "4.1.0-0.27.20120314git3c2946.el7_9" AND architecture of it = "x86_64") of rpm) then "screen-4.1.0-0.27.20120314git3c2946.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "screen" whose (rpm version record of it < rpm package version record "4.1.0-0.27.20120314git3c2946.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "screen" whose (rpm version record of it >= rpm package version record "4.1.0-0.27.20120314git3c2946.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:0808 - Wpa_supplicant Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21080801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "wpa_supplicant" whose (rpm version record of it < rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of rpm AND NOT exists package "wpa_supplicant" whose (rpm version record of it >= rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of rpm) then "wpa_supplicant-2.6-12.el7_9.2.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "wpa_supplicant" whose (rpm version record of it < rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of it AND (not exists package "wpa_supplicant" whose (rpm version record of it >= rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:0808 - Wpa_Supplicant Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21080801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "wpa_supplicant" whose (rpm version record of it < rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of rpm AND NOT exists package "wpa_supplicant" whose (rpm version record of it >= rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of rpm) then "wpa_supplicant-2.6-12.el7_9.2.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "wpa_supplicant" whose (rpm version record of it < rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of it AND (not exists package "wpa_supplicant" whose (rpm version record of it >= rpm package version record "1:2.6-12.el7_9.2" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:1072 - Libldb Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21107201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "ldb-tools" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "ldb-tools" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm) then "ldb-tools-1.5.4-2.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm) then "libldb-1.5.4-2.el7_9.i686" else ""}"
    parameter "t2" = "{if (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm) then "libldb-1.5.4-2.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm) then "libldb-devel-1.5.4-2.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm) then "libldb-devel-1.5.4-2.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm) then "pyldb-1.5.4-2.el7_9.i686" else ""}"
    parameter "t6" = "{if (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm) then "pyldb-1.5.4-2.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of rpm) then "pyldb-devel-1.5.4-2.el7_9.i686" else ""}"
    parameter "t8" = "{if (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of rpm) then "pyldb-devel-1.5.4-2.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "ldb-tools" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "ldb-tools" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:1072 - Libldb Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21107201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "ldb-tools" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "ldb-tools" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm) then "ldb-tools-1.5.4-2.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm) then "libldb-1.5.4-2.el7.i686" else ""}"
    parameter "t2" = "{if (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm) then "libldb-1.5.4-2.el7.x86_64" else ""}"
    parameter "t3" = "{if (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm AND NOT exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm) then "libldb-devel-1.5.4-2.el7.i686" else ""}"
    parameter "t4" = "{if (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm) then "libldb-devel-1.5.4-2.el7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm AND NOT exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm) then "pyldb-1.5.4-2.el7.i686" else ""}"
    parameter "t6" = "{if (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm) then "pyldb-1.5.4-2.el7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm AND NOT exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of rpm) then "pyldb-devel-1.5.4-2.el7.i686" else ""}"
    parameter "t8" = "{if (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of rpm) then "pyldb-devel-1.5.4-2.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "ldb-tools" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it AND (not exists package "ldb-tools" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it AND (not exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it)) OR (exists package "libldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it AND (not exists package "libldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it)) OR (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it AND (not exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it)) OR (exists package "libldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it AND (not exists package "libldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it)) OR (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it AND (not exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it)) OR (exists package "pyldb" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it AND (not exists package "pyldb" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it)) OR (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it AND (not exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "i686") of it)) OR (exists package "pyldb-devel" whose (rpm version record of it < rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it AND (not exists package "pyldb-devel" whose (rpm version record of it >= rpm package version record "1.5.4-2.el7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:1145 - Nettle Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21114501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "nettle" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nettle" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of rpm) then "nettle-2.7.1-9.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "nettle" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nettle" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "nettle-2.7.1-9.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "nettle-devel" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nettle-devel" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of rpm) then "nettle-devel-2.7.1-9.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "nettle-devel" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nettle-devel" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "nettle-devel-2.7.1-9.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "nettle" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "nettle" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of it))  OR (exists package "nettle" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nettle" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "nettle-devel" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "nettle-devel" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "i686") of it))  OR (exists package "nettle-devel" whose (rpm version record of it < rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nettle-devel" whose (rpm version record of it >= rpm package version record "2.7.1-9.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:2147 - Glib2 Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21214701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-2.56.1-9.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-devel-2.56.1-9.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-devel-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "glib2-doc" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "glib2-doc" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of rpm) then "glib2-doc-2.56.1-9.el7_9.noarch" else ""}"
    parameter "t5" = "{if (exists package "glib2-fam" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-fam" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-fam-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-static-2.56.1-9.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-static-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "glib2-tests" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-tests" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-tests-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it))  OR (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it))  OR (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "glib2-doc" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of it AND (not exists package "glib2-doc" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "glib2-fam" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-fam" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it))  OR (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "glib2-tests" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-tests" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:2147 - Glib2 Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21214701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-2.56.1-9.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-devel-2.56.1-9.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-devel-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "glib2-doc" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "glib2-doc" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of rpm) then "glib2-doc-2.56.1-9.el7_9.noarch" else ""}"
    parameter "t5" = "{if (exists package "glib2-fam" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-fam" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-fam-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of rpm) then "glib2-static-2.56.1-9.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-static-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "glib2-tests" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "glib2-tests" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of rpm) then "glib2-tests-2.56.1-9.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it)) OR (exists package "glib2" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it)) OR (exists package "glib2-devel" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-devel" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "glib2-doc" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of it AND (not exists package "glib2-doc" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "glib2-fam" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-fam" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it AND (not exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "i686") of it)) OR (exists package "glib2-static" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-static" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "glib2-tests" whose (rpm version record of it < rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "glib2-tests" whose (rpm version record of it >= rpm package version record "2.56.1-9.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:2260 - Libwebp Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21226001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libwebp" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libwebp" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of rpm) then "libwebp-0.3.0-10.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "libwebp" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwebp" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm) then "libwebp-0.3.0-10.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libwebp-devel" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libwebp-devel" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of rpm) then "libwebp-devel-0.3.0-10.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "libwebp-devel" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwebp-devel" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm) then "libwebp-devel-0.3.0-10.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libwebp-java" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwebp-java" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm) then "libwebp-java-0.3.0-10.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "libwebp-tools" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwebp-tools" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of rpm) then "libwebp-tools-0.3.0-10.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libwebp" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of it AND (not exists package "libwebp" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libwebp" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwebp" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libwebp-devel" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of it AND (not exists package "libwebp-devel" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libwebp-devel" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwebp-devel" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libwebp-java" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwebp-java" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libwebp-tools" whose (rpm version record of it < rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwebp-tools" whose (rpm version record of it >= rpm package version record "0.3.0-10.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:2357 - Dhcp Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21235701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "dhclient" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhclient" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm) then "dhclient-4.2.5-83.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "dhcp" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm) then "dhcp-4.2.5-83.el7_9.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "dhcp-common" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-common" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm) then "dhcp-common-4.2.5-83.el7_9.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of rpm) then "dhcp-devel-4.2.5-83.el7_9.1.i686" else ""}"
    parameter "t4" = "{if (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm) then "dhcp-devel-4.2.5-83.el7_9.1.x86_64" else ""}"
    parameter "t5" = "{if (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of rpm) then "dhcp-libs-4.2.5-83.el7_9.1.i686" else ""}"
    parameter "t6" = "{if (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of rpm) then "dhcp-libs-4.2.5-83.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "dhclient" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "dhclient" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "dhcp" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "dhcp-common" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-common" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7_9.1" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:2357 - Dhcp Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21235701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "dhclient" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhclient" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm) then "dhclient-4.2.5-83.el7.centos.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "dhcp" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm) then "dhcp-4.2.5-83.el7.centos.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "dhcp-common" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-common" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm) then "dhcp-common-4.2.5-83.el7.centos.1.x86_64" else ""}"
    parameter "t3" = "{if (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of rpm AND NOT exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of rpm) then "dhcp-devel-4.2.5-83.el7.centos.1.i686" else ""}"
    parameter "t4" = "{if (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm) then "dhcp-devel-4.2.5-83.el7.centos.1.x86_64" else ""}"
    parameter "t5" = "{if (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of rpm AND NOT exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of rpm) then "dhcp-libs-4.2.5-83.el7.centos.1.i686" else ""}"
    parameter "t6" = "{if (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of rpm) then "dhcp-libs-4.2.5-83.el7.centos.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "dhclient" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it AND (not exists package "dhclient" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it)) OR (exists package "dhcp" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it)) OR (exists package "dhcp-common" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-common" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it)) OR (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of it AND (not exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of it)) OR (exists package "dhcp-devel" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-devel" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it)) OR (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of it AND (not exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "i686") of it)) OR (exists package "dhcp-libs" whose (rpm version record of it < rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it AND (not exists package "dhcp-libs" whose (rpm version record of it >= rpm package version record "12:4.2.5-83.el7.centos.1" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:3296 - Libx11 Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21329601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm) then "libX11-1.6.7-4.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm) then "libX11-1.6.7-4.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libX11-common" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "libX11-common" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of rpm) then "libX11-common-1.6.7-4.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm) then "libX11-devel-1.6.7-4.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm) then "libX11-devel-1.6.7-4.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "libX11-common" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of it AND (not exists package "libX11-common" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it))  OR (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:3296 - Libx11 Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21329601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm) then "libX11-1.6.7-4.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm) then "libX11-1.6.7-4.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libX11-common" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "libX11-common" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of rpm) then "libX11-common-1.6.7-4.el7_9.noarch" else ""}"
    parameter "t3" = "{if (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of rpm) then "libX11-devel-1.6.7-4.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of rpm) then "libX11-devel-1.6.7-4.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libX11" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libX11" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libX11-common" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of it AND (not exists package "libX11-common" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libX11-devel" whose (rpm version record of it < rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libX11-devel" whose (rpm version record of it >= rpm package version record "1.6.7-4.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:3810 - Libxml2 Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21381001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t1" = "{if (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-devel-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t3" = "{if (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-devel-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libxml2-python" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-python" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-python-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t5" = "{if (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-static-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t6" = "{if (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-static-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it))  OR (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it))  OR (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it))  OR (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it))  OR (exists package "libxml2-python" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-python" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it))  OR (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it))  OR (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:3810 - Libxml2 Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21381001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t1" = "{if (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-devel-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t3" = "{if (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-devel-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libxml2-python" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-python" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-python-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "t5" = "{if (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm AND NOT exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of rpm) then "libxml2-static-2.9.1-6.el7_9.6.i686" else ""}"
    parameter "t6" = "{if (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm AND NOT exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of rpm) then "libxml2-static-2.9.1-6.el7_9.6.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it)) OR (exists package "libxml2" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it)) OR (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it)) OR (exists package "libxml2-devel" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-devel" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it)) OR (exists package "libxml2-python" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-python" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it)) OR (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it AND (not exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "i686") of it)) OR (exists package "libxml2-static" whose (rpm version record of it < rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it AND (not exists package "libxml2-static" whose (rpm version record of it >= rpm package version record "2.9.1-6.el7_9.6" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:4033 - Binutils Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21403301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "binutils" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "binutils" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm) then "binutils-2.27-44.base.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of rpm) then "binutils-devel-2.27-44.base.el7_9.1.i686" else ""}"
    parameter "t2" = "{if (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm) then "binutils-devel-2.27-44.base.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "binutils" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "binutils" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:4033 - Binutils Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21403301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "binutils" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "binutils" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm) then "binutils-2.27-44.base.el7_9.1.x86_64" else ""}"
    parameter "t1" = "{if (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of rpm) then "binutils-devel-2.27-44.base.el7_9.1.i686" else ""}"
    parameter "t2" = "{if (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of rpm) then "binutils-devel-2.27-44.base.el7_9.1.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "binutils" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "binutils" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "binutils-devel" whose (rpm version record of it < rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "binutils-devel" whose (rpm version record of it >= rpm package version record "2.27-44.base.el7_9.1" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:4782 - Openssh Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21478201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openssh" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "openssh-askpass" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-askpass" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-askpass-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "openssh-cavs" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-cavs" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-cavs-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openssh-clients" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-clients" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-clients-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "openssh-keycat" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-keycat" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-keycat-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openssh-ldap" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-ldap" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-ldap-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openssh-server" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-server" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-server-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "openssh-server-sysvinit" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-server-sysvinit" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-server-sysvinit-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of rpm) then "pam_ssh_agent_auth-0.10.3-2.22.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of rpm) then "pam_ssh_agent_auth-0.10.3-2.22.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "openssh" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-askpass" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-askpass" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-cavs" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-cavs" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-clients" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-clients" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-keycat" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-keycat" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-ldap" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-ldap" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-server" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-server" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssh-server-sysvinit" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-server-sysvinit" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of it AND (not exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of it))  OR (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:4782 - Openssh Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21478201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openssh" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "openssh-askpass" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-askpass" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-askpass-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "openssh-cavs" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-cavs" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-cavs-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openssh-clients" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-clients" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-clients-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "openssh-keycat" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-keycat" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-keycat-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openssh-ldap" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-ldap" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-ldap-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openssh-server" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-server" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-server-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "openssh-server-sysvinit" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssh-server-sysvinit" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of rpm) then "openssh-server-sysvinit-7.4p1-22.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of rpm) then "pam_ssh_agent_auth-0.10.3-2.22.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of rpm) then "pam_ssh_agent_auth-0.10.3-2.22.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "openssh" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-askpass" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-askpass" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-cavs" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-cavs" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-clients" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-clients" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-keycat" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-keycat" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-ldap" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-ldap" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-server" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-server" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssh-server-sysvinit" whose (rpm version record of it < rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssh-server-sysvinit" whose (rpm version record of it >= rpm package version record "7.4p1-22.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of it AND (not exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "i686") of it)) OR (exists package "pam_ssh_agent_auth" whose (rpm version record of it < rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "pam_ssh_agent_auth" whose (rpm version record of it >= rpm package version record "0.10.3-2.22.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:4785 - Rpm Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21478501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rpm" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "rpm-apidocs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "rpm-apidocs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm) then "rpm-apidocs-4.11.3-48.el7_9.noarch" else ""}"
    parameter "t2" = "{if (exists package "rpm-build" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-build" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-build-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-build-libs-4.11.3-48.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-build-libs-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "rpm-cron" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "rpm-cron" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm) then "rpm-cron-4.11.3-48.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-devel-4.11.3-48.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-devel-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-libs-4.11.3-48.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-libs-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-plugin-systemd-inhibit-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "rpm-python" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-python" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-python-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "rpm-sign" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-sign" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-sign-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "rpm" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-apidocs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it AND (not exists package "rpm-apidocs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "rpm-build" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-build" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it))  OR (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-cron" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it AND (not exists package "rpm-cron" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it))  OR (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it))  OR (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-python" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-python" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "rpm-sign" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-sign" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:4785 - Rpm Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21478501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rpm" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "rpm-apidocs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "rpm-apidocs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm) then "rpm-apidocs-4.11.3-48.el7_9.noarch" else ""}"
    parameter "t2" = "{if (exists package "rpm-build" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-build" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-build-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-build-libs-4.11.3-48.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-build-libs-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "rpm-cron" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "rpm-cron" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of rpm) then "rpm-cron-4.11.3-48.el7_9.noarch" else ""}"
    parameter "t6" = "{if (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-devel-4.11.3-48.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-devel-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of rpm) then "rpm-libs-4.11.3-48.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-libs-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-plugin-systemd-inhibit-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "rpm-python" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-python" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-python-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "rpm-sign" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rpm-sign" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of rpm) then "rpm-sign-4.11.3-48.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "rpm" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-apidocs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it AND (not exists package "rpm-apidocs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "rpm-build" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-build" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it)) OR (exists package "rpm-build-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-build-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-cron" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it AND (not exists package "rpm-cron" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it)) OR (exists package "rpm-devel" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-devel" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it AND (not exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "i686") of it)) OR (exists package "rpm-libs" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-libs" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-plugin-systemd-inhibit" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-python" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-python" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "rpm-sign" whose (rpm version record of it < rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rpm-sign" whose (rpm version record of it >= rpm package version record "4.11.3-48.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2021:4904 - Nss Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="21490401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-3.67.0-4.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-devel-3.67.0-4.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-devel-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-pkcs11-devel-3.67.0-4.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-pkcs11-devel-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-sysinit-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-tools-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it))  OR (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it))  OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it))  OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2021:4904 - Nss Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="21490401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-3.67.0-4.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-devel-3.67.0-4.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-devel-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of rpm) then "nss-pkcs11-devel-3.67.0-4.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-pkcs11-devel-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-sysinit-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of rpm) then "nss-tools-3.67.0-4.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "i686") of it)) OR (exists package "nss-pkcs11-devel" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-pkcs11-devel" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-sysinit" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-sysinit" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "nss-tools" whose (rpm version record of it < rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "nss-tools" whose (rpm version record of it >= rpm package version record "3.67.0-4.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:0274 - Polkit Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22027401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm) then "polkit-0.112-26.el7_9.1.i686" else ""}"
    parameter "t1" = "{if (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm) then "polkit-0.112-26.el7_9.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm) then "polkit-devel-0.112-26.el7_9.1.i686" else ""}"
    parameter "t3" = "{if (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm) then "polkit-devel-0.112-26.el7_9.1.x86_64" else ""}"
    parameter "t4" = "{if (exists package "polkit-docs" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of rpm AND NOT exists package "polkit-docs" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of rpm) then "polkit-docs-0.112-26.el7_9.1.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it))  OR (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it))  OR (exists package "polkit-docs" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of it AND (not exists package "polkit-docs" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:0274 - Polkit Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22027401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm) then "polkit-0.112-26.el7_9.1.i686" else ""}"
    parameter "t1" = "{if (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm) then "polkit-0.112-26.el7_9.1.x86_64" else ""}"
    parameter "t2" = "{if (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm AND NOT exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of rpm) then "polkit-devel-0.112-26.el7_9.1.i686" else ""}"
    parameter "t3" = "{if (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm AND NOT exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of rpm) then "polkit-devel-0.112-26.el7_9.1.x86_64" else ""}"
    parameter "t4" = "{if (exists package "polkit-docs" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of rpm AND NOT exists package "polkit-docs" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of rpm) then "polkit-docs-0.112-26.el7_9.1.noarch" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "polkit" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "polkit" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it AND (not exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "i686") of it)) OR (exists package "polkit-devel" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it AND (not exists package "polkit-devel" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "x86_64") of it)) OR (exists package "polkit-docs" whose (rpm version record of it < rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of it AND (not exists package "polkit-docs" whose (rpm version record of it >= rpm package version record "0.112-26.el7_9.1" AND architecture of it = "noarch") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:0328 - Samba Security and Bug Fix Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22032801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "ctdb" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "ctdb" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "ctdb-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "ctdb-tests" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "ctdb-tests" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "ctdb-tests-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libsmbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libsmbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "libsmbclient-4.10.16-18.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "libsmbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libsmbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "libsmbclient-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "libsmbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libsmbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "libsmbclient-devel-4.10.16-18.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "libsmbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libsmbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "libsmbclient-devel-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "libwbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libwbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "libwbclient-4.10.16-18.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "libwbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "libwbclient-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "libwbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "libwbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "libwbclient-devel-4.10.16-18.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "libwbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "libwbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "libwbclient-devel-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "samba" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "samba-client" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-client" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-client-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "samba-client-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-client-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-client-libs-4.10.16-18.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "samba-client-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-client-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-client-libs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "samba-common" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "samba-common" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of rpm) then "samba-common-4.10.16-18.el7_9.noarch" else ""}"
    parameter "t15" = "{if (exists package "samba-common-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-common-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-common-libs-4.10.16-18.el7_9.i686" else ""}"
    parameter "t16" = "{if (exists package "samba-common-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-common-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-common-libs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t17" = "{if (exists package "samba-common-tools" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-common-tools" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-common-tools-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t18" = "{if (exists package "samba-dc" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-dc" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-dc-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t19" = "{if (exists package "samba-dc-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-dc-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-dc-libs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t20" = "{if (exists package "samba-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-devel-4.10.16-18.el7_9.i686" else ""}"
    parameter "t21" = "{if (exists package "samba-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-devel-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t22" = "{if (exists package "samba-krb5-printing" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-krb5-printing" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-krb5-printing-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t23" = "{if (exists package "samba-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-libs-4.10.16-18.el7_9.i686" else ""}"
    parameter "t24" = "{if (exists package "samba-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-libs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t25" = "{if (exists package "samba-pidl" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "samba-pidl" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of rpm) then "samba-pidl-4.10.16-18.el7_9.noarch" else ""}"
    parameter "t26" = "{if (exists package "samba-python" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-python" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-python-4.10.16-18.el7_9.i686" else ""}"
    parameter "t27" = "{if (exists package "samba-python" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-python" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-python-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t28" = "{if (exists package "samba-python-test" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-python-test" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-python-test-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t29" = "{if (exists package "samba-test" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-test" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-test-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t30" = "{if (exists package "samba-test-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-test-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-test-libs-4.10.16-18.el7_9.i686" else ""}"
    parameter "t31" = "{if (exists package "samba-test-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-test-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-test-libs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t32" = "{if (exists package "samba-vfs-glusterfs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-vfs-glusterfs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-vfs-glusterfs-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t33" = "{if (exists package "samba-winbind" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-winbind" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-winbind-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t34" = "{if (exists package "samba-winbind-clients" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-winbind-clients" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-winbind-clients-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t35" = "{if (exists package "samba-winbind-krb5-locator" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-winbind-krb5-locator" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-winbind-krb5-locator-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "t36" = "{if (exists package "samba-winbind-modules" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "samba-winbind-modules" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of rpm) then "samba-winbind-modules-4.10.16-18.el7_9.i686" else ""}"
    parameter "t37" = "{if (exists package "samba-winbind-modules" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "samba-winbind-modules" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of rpm) then "samba-winbind-modules-4.10.16-18.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21" & " " & parameter "t22" & " " & parameter "t23" & " " & parameter "t24" & " " & parameter "t25" & " " & parameter "t26" & " " & parameter "t27" & " " & parameter "t28" & " " & parameter "t29" & " " & parameter "t30" & " " & parameter "t31" & " " & parameter "t32" & " " & parameter "t33" & " " & parameter "t34" & " " & parameter "t35" & " " & parameter "t36" & " " & parameter "t37"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "ctdb" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "ctdb" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "ctdb-tests" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "ctdb-tests" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libsmbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "libsmbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libsmbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libsmbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libsmbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "libsmbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libsmbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libsmbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libwbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "libwbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libwbclient" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwbclient" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "libwbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "libwbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "libwbclient-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "libwbclient-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-client" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-client" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-client-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-client-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-client-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-client-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-common" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of it AND (not exists package "samba-common" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "samba-common-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-common-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-common-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-common-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-common-tools" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-common-tools" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-dc" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-dc" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-dc-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-dc-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-devel" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-devel" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-krb5-printing" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-krb5-printing" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-pidl" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of it AND (not exists package "samba-pidl" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "samba-python" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-python" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-python" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-python" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-python-test" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-python-test" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-test" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-test" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-test-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-test-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-test-libs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-test-libs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-vfs-glusterfs" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-vfs-glusterfs" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-winbind" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-winbind" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-winbind-clients" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-winbind-clients" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-winbind-krb5-locator" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-winbind-krb5-locator" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "samba-winbind-modules" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it AND (not exists package "samba-winbind-modules" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "i686") of it)) OR (exists package "samba-winbind-modules" whose (rpm version record of it < rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "samba-winbind-modules" whose (rpm version record of it >= rpm package version record "4.10.16-18.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:0609 - Python-Pillow Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22060901" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "python-pillow" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "python-pillow" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of rpm) then "python-pillow-2.0.0-23.gitd1c6db8.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "python-pillow" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "python-pillow-devel" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "python-pillow-devel" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of rpm) then "python-pillow-devel-2.0.0-23.gitd1c6db8.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "python-pillow-devel" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow-devel" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-devel-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "python-pillow-doc" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow-doc" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-doc-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "python-pillow-qt" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow-qt" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-qt-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "python-pillow-sane" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow-sane" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-sane-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "python-pillow-tk" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-pillow-tk" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of rpm) then "python-pillow-tk-2.0.0-23.gitd1c6db8.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "python-pillow" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of it AND (not exists package "python-pillow" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "python-pillow" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-pillow-devel" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of it AND (not exists package "python-pillow-devel" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "python-pillow-devel" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow-devel" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-pillow-doc" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow-doc" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-pillow-qt" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow-qt" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-pillow-sane" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow-sane" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-pillow-tk" whose (rpm version record of it < rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-pillow-tk" whose (rpm version record of it >= rpm package version record "2.0.0-23.gitd1c6db8.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:0621 - Openldap Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22062101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm) then "openldap-2.4.44-25.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "openldap-clients" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-clients" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-clients-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm) then "openldap-devel-2.4.44-25.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-devel-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openldap-servers" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-servers" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-servers-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openldap-servers-sql" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-servers-sql" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-servers-sql-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it))  OR (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openldap-clients" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-clients" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it))  OR (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openldap-servers" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-servers" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openldap-servers-sql" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-servers-sql" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:0621 - Openldap Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22062101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm) then "openldap-2.4.44-25.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "openldap-clients" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-clients" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-clients-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of rpm) then "openldap-devel-2.4.44-25.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-devel-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openldap-servers" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-servers" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-servers-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openldap-servers-sql" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openldap-servers-sql" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openldap-servers-sql-2.4.44-25.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it)) OR (exists package "openldap" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openldap-clients" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-clients" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "i686") of it)) OR (exists package "openldap-devel" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-devel" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openldap-servers" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-servers" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openldap-servers-sql" whose (rpm version record of it < rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openldap-servers-sql" whose (rpm version record of it >= rpm package version record "2.4.44-25.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:0666 - Cyrus-Sasl Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22066601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-2.1.26-24.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-devel-2.1.26-24.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-devel-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-gs2-2.1.26-24.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-gs2-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-gssapi-2.1.26-24.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-gssapi-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-ldap-2.1.26-24.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-ldap-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-lib-2.1.26-24.el7_9.i686" else ""}"
    parameter "t11" = "{if (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-lib-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-md5-2.1.26-24.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-md5-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-ntlm-2.1.26-24.el7_9.i686" else ""}"
    parameter "t15" = "{if (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-ntlm-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t16" = "{if (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-plain-2.1.26-24.el7_9.i686" else ""}"
    parameter "t17" = "{if (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-plain-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t18" = "{if (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-scram-2.1.26-24.el7_9.i686" else ""}"
    parameter "t19" = "{if (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-scram-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t20" = "{if (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-sql-2.1.26-24.el7_9.i686" else ""}"
    parameter "t21" = "{if (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-sql-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it))  OR (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:0666 - Cyrus-Sasl Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22066601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-2.1.26-24.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-devel-2.1.26-24.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-devel-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-gs2-2.1.26-24.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-gs2-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-gssapi-2.1.26-24.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-gssapi-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-ldap-2.1.26-24.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-ldap-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-lib-2.1.26-24.el7_9.i686" else ""}"
    parameter "t11" = "{if (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-lib-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-md5-2.1.26-24.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-md5-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-ntlm-2.1.26-24.el7_9.i686" else ""}"
    parameter "t15" = "{if (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-ntlm-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t16" = "{if (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-plain-2.1.26-24.el7_9.i686" else ""}"
    parameter "t17" = "{if (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-plain-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t18" = "{if (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-scram-2.1.26-24.el7_9.i686" else ""}"
    parameter "t19" = "{if (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-scram-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "t20" = "{if (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of rpm) then "cyrus-sasl-sql-2.1.26-24.el7_9.i686" else ""}"
    parameter "t21" = "{if (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of rpm) then "cyrus-sasl-sql-2.1.26-24.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17" & " " & parameter "t18" & " " & parameter "t19" & " " & parameter "t20" & " " & parameter "t21"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-devel" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-devel" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-gs2" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-gs2" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-gssapi" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-gssapi" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-ldap" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-ldap" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-lib" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-lib" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-md5" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-md5" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-ntlm" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-ntlm" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-plain" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-plain" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-scram" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-scram" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it AND (not exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "i686") of it)) OR (exists package "cyrus-sasl-sql" whose (rpm version record of it < rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "cyrus-sasl-sql" whose (rpm version record of it >= rpm package version record "2.1.26-24.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:1045 - Httpd Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22104501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "httpd" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "httpd" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "httpd-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t1" = "{if (exists package "httpd-devel" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "httpd-devel" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "httpd-devel-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t2" = "{if (exists package "httpd-manual" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "noarch") of rpm AND NOT exists package "httpd-manual" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "noarch") of rpm) then "httpd-manual-2.4.6-97.el7_9.5.noarch" else ""}"
    parameter "t3" = "{if (exists package "httpd-tools" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "httpd-tools" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "httpd-tools-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t4" = "{if (exists package "mod_ldap" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "mod_ldap" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "mod_ldap-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t5" = "{if (exists package "mod_proxy_html" whose (rpm version record of it < rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "mod_proxy_html" whose (rpm version record of it >= rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "mod_proxy_html-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t6" = "{if (exists package "mod_session" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "mod_session" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "mod_session-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "t7" = "{if (exists package "mod_ssl" whose (rpm version record of it < rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm AND NOT exists package "mod_ssl" whose (rpm version record of it >= rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of rpm) then "mod_ssl-2.4.6-97.el7_9.5.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "httpd" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "httpd" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "httpd-devel" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "httpd-devel" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "httpd-manual" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "noarch") of it AND (not exists package "httpd-manual" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "noarch") of it))  OR (exists package "httpd-tools" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "httpd-tools" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "mod_ldap" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "mod_ldap" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "mod_proxy_html" whose (rpm version record of it < rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "mod_proxy_html" whose (rpm version record of it >= rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "mod_session" whose (rpm version record of it < rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "mod_session" whose (rpm version record of it >= rpm package version record "2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it))  OR (exists package "mod_ssl" whose (rpm version record of it < rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it AND (not exists package "mod_ssl" whose (rpm version record of it >= rpm package version record "1:2.4.6-97.el7_9.5" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:1066 - Openssl Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22106601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openssl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-devel-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t2" = "{if (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-devel-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-libs-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-libs-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openssl-perl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-perl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-perl-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-static-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-static-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "openssl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it))  OR (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it))  OR (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssl-perl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-perl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it))  OR (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:1066 - Openssl Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22106601" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "openssl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-devel-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t2" = "{if (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-devel-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-libs-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-libs-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "openssl-perl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-perl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-perl-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of rpm) then "openssl-static-1.0.2k-25.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of rpm) then "openssl-static-1.0.2k-25.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "openssl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it)) OR (exists package "openssl-devel" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-devel" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it)) OR (exists package "openssl-libs" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-libs" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssl-perl" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-perl" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it AND (not exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "i686") of it)) OR (exists package "openssl-static" whose (rpm version record of it < rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "openssl-static" whose (rpm version record of it >= rpm package version record "1:1.0.2k-25.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:1069 - Expat Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22106901" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-2.1.0-14.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-devel-2.1.0-14.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-devel-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-static-2.1.0-14.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-static-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it))  OR (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it))  OR (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it))  OR (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:1069 - Expat Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22106901" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-2.1.0-14.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-devel-2.1.0-14.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-devel-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of rpm) then "expat-static-2.1.0-14.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of rpm) then "expat-static-2.1.0-14.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it)) OR (exists package "expat" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it)) OR (exists package "expat-devel" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat-devel" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it AND (not exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "i686") of it)) OR (exists package "expat-static" whose (rpm version record of it < rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "expat-static" whose (rpm version record of it >= rpm package version record "2.1.0-14.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:2191 - Gzip Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22219101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "gzip" whose (rpm version record of it < rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "gzip" whose (rpm version record of it >= rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of rpm) then "gzip-1.5-11.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "gzip" whose (rpm version record of it < rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "gzip" whose (rpm version record of it >= rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:2191 - Gzip Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22219101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "gzip" whose (rpm version record of it < rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "gzip" whose (rpm version record of it >= rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of rpm) then "gzip-1.5-11.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "gzip" whose (rpm version record of it < rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "gzip" whose (rpm version record of it >= rpm package version record "1.5-11.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:2213 - Zlib Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22221301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "minizip-1.2.7-20.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "minizip-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "minizip-devel-1.2.7-20.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "minizip-devel-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-1.2.7-20.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-devel-1.2.7-20.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-devel-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-static-1.2.7-20.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-static-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it))  OR (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it))  OR (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it))  OR (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it))  OR (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it))  OR (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:2213 - Zlib Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22221301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "minizip-1.2.7-20.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "minizip-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "minizip-devel-1.2.7-20.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "minizip-devel-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-1.2.7-20.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-devel-1.2.7-20.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-devel-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of rpm) then "zlib-static-1.2.7-20.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of rpm) then "zlib-static-1.2.7-20.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it)) OR (exists package "minizip" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "minizip" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it)) OR (exists package "minizip-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "minizip-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it)) OR (exists package "zlib" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it)) OR (exists package "zlib-devel" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib-devel" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it AND (not exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "i686") of it)) OR (exists package "zlib-static" whose (rpm version record of it < rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "zlib-static" whose (rpm version record of it >= rpm package version record "1.2.7-20.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:4803 - Rsyslog Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22480301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rsyslog" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t1" = "{if (exists package "rsyslog-crypto" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-crypto" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-crypto-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t2" = "{if (exists package "rsyslog-doc" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of rpm AND NOT exists package "rsyslog-doc" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of rpm) then "rsyslog-doc-8.24.0-57.el7_9.3.noarch" else ""}"
    parameter "t3" = "{if (exists package "rsyslog-elasticsearch" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-elasticsearch" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-elasticsearch-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t4" = "{if (exists package "rsyslog-gnutls" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-gnutls" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-gnutls-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t5" = "{if (exists package "rsyslog-gssapi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-gssapi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-gssapi-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t6" = "{if (exists package "rsyslog-kafka" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-kafka" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-kafka-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t7" = "{if (exists package "rsyslog-libdbi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-libdbi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-libdbi-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t8" = "{if (exists package "rsyslog-mmaudit" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmaudit" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmaudit-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t9" = "{if (exists package "rsyslog-mmjsonparse" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmjsonparse" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmjsonparse-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t10" = "{if (exists package "rsyslog-mmkubernetes" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmkubernetes" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmkubernetes-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t11" = "{if (exists package "rsyslog-mmnormalize" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmnormalize" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmnormalize-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t12" = "{if (exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmsnmptrapd-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t13" = "{if (exists package "rsyslog-mysql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mysql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mysql-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t14" = "{if (exists package "rsyslog-pgsql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-pgsql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-pgsql-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t15" = "{if (exists package "rsyslog-relp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-relp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-relp-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t16" = "{if (exists package "rsyslog-snmp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-snmp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-snmp-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t17" = "{if (exists package "rsyslog-udpspoof" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-udpspoof" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-udpspoof-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "rsyslog" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-crypto" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-crypto" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-doc" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of it AND (not exists package "rsyslog-doc" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of it))  OR (exists package "rsyslog-elasticsearch" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-elasticsearch" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-gnutls" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-gnutls" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-gssapi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-gssapi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-kafka" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-kafka" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-libdbi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-libdbi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mmaudit" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmaudit" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mmjsonparse" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmjsonparse" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mmkubernetes" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmkubernetes" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mmnormalize" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmnormalize" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-mysql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mysql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-pgsql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-pgsql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-relp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-relp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-snmp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-snmp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))  OR (exists package "rsyslog-udpspoof" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-udpspoof" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:4803 - Rsyslog Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22480301" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rsyslog" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t1" = "{if (exists package "rsyslog-crypto" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-crypto" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-crypto-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t2" = "{if (exists package "rsyslog-doc" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of rpm AND NOT exists package "rsyslog-doc" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of rpm) then "rsyslog-doc-8.24.0-57.el7_9.3.noarch" else ""}"
    parameter "t3" = "{if (exists package "rsyslog-elasticsearch" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-elasticsearch" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-elasticsearch-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t4" = "{if (exists package "rsyslog-gnutls" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-gnutls" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-gnutls-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t5" = "{if (exists package "rsyslog-gssapi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-gssapi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-gssapi-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t6" = "{if (exists package "rsyslog-kafka" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-kafka" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-kafka-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t7" = "{if (exists package "rsyslog-libdbi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-libdbi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-libdbi-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t8" = "{if (exists package "rsyslog-mmaudit" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmaudit" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmaudit-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t9" = "{if (exists package "rsyslog-mmjsonparse" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmjsonparse" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmjsonparse-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t10" = "{if (exists package "rsyslog-mmkubernetes" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmkubernetes" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmkubernetes-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t11" = "{if (exists package "rsyslog-mmnormalize" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmnormalize" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmnormalize-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t12" = "{if (exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mmsnmptrapd-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t13" = "{if (exists package "rsyslog-mysql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-mysql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-mysql-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t14" = "{if (exists package "rsyslog-pgsql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-pgsql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-pgsql-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t15" = "{if (exists package "rsyslog-relp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-relp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-relp-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t16" = "{if (exists package "rsyslog-snmp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-snmp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-snmp-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "t17" = "{if (exists package "rsyslog-udpspoof" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsyslog-udpspoof" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of rpm) then "rsyslog-udpspoof-8.24.0-57.el7_9.3.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15" & " " & parameter "t16" & " " & parameter "t17"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "rsyslog" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-crypto" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-crypto" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-doc" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of it AND (not exists package "rsyslog-doc" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "noarch") of it)) OR (exists package "rsyslog-elasticsearch" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-elasticsearch" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-gnutls" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-gnutls" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-gssapi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-gssapi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-kafka" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-kafka" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-libdbi" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-libdbi" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mmaudit" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmaudit" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mmjsonparse" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmjsonparse" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mmkubernetes" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmkubernetes" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mmnormalize" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmnormalize" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mmsnmptrapd" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-mysql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-mysql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-pgsql" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-pgsql" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-relp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-relp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-snmp" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-snmp" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it)) OR (exists package "rsyslog-udpspoof" whose (rpm version record of it < rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it AND (not exists package "rsyslog-udpspoof" whose (rpm version record of it >= rpm package version record "8.24.0-57.el7_9.3" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:5052 - Xz Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22505201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "xz" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-compat-libs-5.2.2-2.el7_9.i686" else ""}"
    parameter "t2" = "{if (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-compat-libs-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-devel-5.2.2-2.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-devel-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-libs-5.2.2-2.el7_9.i686" else ""}"
    parameter "t6" = "{if (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-libs-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "xz-lzma-compat" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-lzma-compat" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-lzma-compat-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "xz" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it))  OR (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "xz-lzma-compat" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-lzma-compat" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5052 - Xz Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22505201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "xz" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-compat-libs-5.2.2-2.el7_9.i686" else ""}"
    parameter "t2" = "{if (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-compat-libs-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-devel-5.2.2-2.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-devel-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of rpm) then "xz-libs-5.2.2-2.el7_9.i686" else ""}"
    parameter "t6" = "{if (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-libs-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "xz-lzma-compat" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "xz-lzma-compat" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of rpm) then "xz-lzma-compat-5.2.2-2.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "xz" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it)) OR (exists package "xz-compat-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-compat-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it)) OR (exists package "xz-devel" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-devel" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it AND (not exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "i686") of it)) OR (exists package "xz-libs" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-libs" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "xz-lzma-compat" whose (rpm version record of it < rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "xz-lzma-compat" whose (rpm version record of it >= rpm package version record "5.2.2-2.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:5162 - Postgresql Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22516201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-9.2.24-8.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "postgresql-contrib" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-contrib" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-contrib-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-devel-9.2.24-8.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-devel-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "postgresql-docs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-docs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-docs-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-libs-9.2.24-8.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-libs-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "postgresql-plperl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-plperl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-plperl-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t9" = "{if (exists package "postgresql-plpython" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-plpython" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-plpython-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "postgresql-pltcl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-pltcl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-pltcl-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "postgresql-server" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-server" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-server-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-static-9.2.24-8.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-static-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "postgresql-test" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-test" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-test-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t15" = "{if (exists package "postgresql-upgrade" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-upgrade" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-upgrade-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-contrib" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-contrib" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-docs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-docs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-plperl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-plperl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-plpython" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-plpython" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-pltcl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-pltcl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-server" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-server" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it))  OR (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-test" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-test" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "postgresql-upgrade" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-upgrade" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5162 - Postgresql Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22516201" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-9.2.24-8.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "postgresql-contrib" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-contrib" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-contrib-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-devel-9.2.24-8.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-devel-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "postgresql-docs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-docs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-docs-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-libs-9.2.24-8.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-libs-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "postgresql-plperl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-plperl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-plperl-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t9" = "{if (exists package "postgresql-plpython" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-plpython" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-plpython-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "postgresql-pltcl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-pltcl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-pltcl-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t11" = "{if (exists package "postgresql-server" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-server" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-server-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t12" = "{if (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of rpm) then "postgresql-static-9.2.24-8.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-static-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t14" = "{if (exists package "postgresql-test" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-test" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-test-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "t15" = "{if (exists package "postgresql-upgrade" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "postgresql-upgrade" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of rpm) then "postgresql-upgrade-9.2.24-8.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14" & " " & parameter "t15"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it)) OR (exists package "postgresql" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-contrib" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-contrib" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it)) OR (exists package "postgresql-devel" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-devel" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-docs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-docs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it)) OR (exists package "postgresql-libs" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-libs" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-plperl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-plperl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-plpython" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-plpython" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-pltcl" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-pltcl" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-server" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-server" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it AND (not exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "i686") of it)) OR (exists package "postgresql-static" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-static" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-test" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-test" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "postgresql-upgrade" whose (rpm version record of it < rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "postgresql-upgrade" whose (rpm version record of it >= rpm package version record "9.2.24-8.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5234 - Python-Virtualenv Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22523401" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "python-virtualenv" whose (rpm version record of it < rpm package version record "15.1.0-7.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "python-virtualenv" whose (rpm version record of it >= rpm package version record "15.1.0-7.el7_9" AND architecture of it = "noarch") of rpm) then "python-virtualenv-15.1.0-7.el7_9.noarch" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "python-virtualenv" whose (rpm version record of it < rpm package version record "15.1.0-7.el7_9" AND architecture of it = "noarch") of it AND (not exists package "python-virtualenv" whose (rpm version record of it >= rpm package version record "15.1.0-7.el7_9" AND architecture of it = "noarch") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:5235 - Python Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22523501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "python" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "python-debug" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-debug" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-debug-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "python-devel" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-devel" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-devel-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of rpm) then "python-libs-2.7.5-92.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-libs-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "python-test" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-test" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-test-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "python-tools" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-tools" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-tools-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "tkinter" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "tkinter" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "tkinter-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "python" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-debug" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-debug" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-devel" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-devel" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of it AND (not exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of it))  OR (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-test" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-test" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "python-tools" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-tools" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "tkinter" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "tkinter" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5235 - Python Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22523501" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "python" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t1" = "{if (exists package "python-debug" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-debug" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-debug-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "python-devel" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-devel" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-devel-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t3" = "{if (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of rpm) then "python-libs-2.7.5-92.el7_9.i686" else ""}"
    parameter "t4" = "{if (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-libs-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t5" = "{if (exists package "python-test" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-test" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-test-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "python-tools" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-tools" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "python-tools-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "t7" = "{if (exists package "tkinter" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "tkinter" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of rpm) then "tkinter-2.7.5-92.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "python" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "python-debug" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-debug" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "python-devel" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-devel" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of it AND (not exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "i686") of it)) OR (exists package "python-libs" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-libs" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "python-test" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-test" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "python-tools" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "python-tools" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "tkinter" whose (rpm version record of it < rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "tkinter" whose (rpm version record of it >= rpm package version record "2.7.5-92.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:5698 - Java-1.8.0-Openjdk Security, Bug Fix, And Enhancement Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22569801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-accessibility-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-accessibility-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-demo-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-demo-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-headless-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-headless-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm) then "java-1.8.0-openjdk-javadoc-1.8.0.342.b07-1.el7_9.noarch" else ""}"
    parameter "t11" = "{if (exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm) then "java-1.8.0-openjdk-javadoc-zip-1.8.0.342.b07-1.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-src-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-src-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))  OR (exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it AND (not exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it AND (not exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it))  OR (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it))  OR (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5698 - Java-1.8.0-Openjdk Security, Bug Fix, and Enhancement Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22569801" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t1" = "{if (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t2" = "{if (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-accessibility-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t3" = "{if (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-accessibility-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t4" = "{if (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-demo-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t5" = "{if (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-demo-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t6" = "{if (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t7" = "{if (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-devel-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t8" = "{if (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-headless-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t9" = "{if (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-headless-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "t10" = "{if (exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm) then "java-1.8.0-openjdk-javadoc-1.8.0.342.b07-1.el7_9.noarch" else ""}"
    parameter "t11" = "{if (exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm AND NOT exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of rpm) then "java-1.8.0-openjdk-javadoc-zip-1.8.0.342.b07-1.el7_9.noarch" else ""}"
    parameter "t12" = "{if (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm AND NOT exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of rpm) then "java-1.8.0-openjdk-src-1.8.0.342.b07-1.el7_9.i686" else ""}"
    parameter "t13" = "{if (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of rpm) then "java-1.8.0-openjdk-src-1.8.0.342.b07-1.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-accessibility" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-demo" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-devel" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-headless" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it)) OR (exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it AND (not exists package "java-1.8.0-openjdk-javadoc" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it AND (not exists package "java-1.8.0-openjdk-javadoc-zip" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "noarch") of it)) OR (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it AND (not exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "i686") of it)) OR (exists package "java-1.8.0-openjdk-src" whose (rpm version record of it < rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "java-1.8.0-openjdk-src" whose (rpm version record of it >= rpm package version record "1:1.8.0.342.b07-1.el7_9" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:5937 - Kernel Security And Bug Fix Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22593701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "bpftool" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "bpftool" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "bpftool-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "kernel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "kernel-abi-whitelists" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "kernel-abi-whitelists" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm) then "kernel-abi-whitelists-3.10.0-1160.76.1.el7.noarch" else ""}"
    parameter "t3" = "{if (exists package "kernel-debug" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-debug" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-debug-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "kernel-debug-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-debug-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-debug-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "kernel-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "kernel-doc" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "kernel-doc" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm) then "kernel-doc-3.10.0-1160.76.1.el7.noarch" else ""}"
    parameter "t7" = "{if (exists package "kernel-headers" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-headers" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-headers-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "kernel-tools" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t9" = "{if (exists package "kernel-tools-libs" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools-libs" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-libs-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "kernel-tools-libs-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools-libs-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-libs-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "perf-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t12" = "{if (exists package "python-perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "python-perf-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12"}"
    

    if {parameter "packages" as trimmed string != ""}
        parameter "empty_packages" = "false"
        parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
        parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
        parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

        if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

            if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
                if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                    add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
                endif
                if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                    add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
                endif
                if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                    add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
                endif
                
                
                collect prefetch items
                execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                    if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                        add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                        collect prefetch items

                        execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                    endif
                endif

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

                if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
                endif
            endif
        endif
    else
        parameter "empty_packages" = "true"
        if {not exists folder (parameter "EDR_DeployDataDir")}
            execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
        endif
        execute prefetch plug-in "/bin/bash" -c "echo [{now}] {parameter "fixletid"} Warning: Nothing to install. Please check if you are using the latest kernel. >> '{parameter "EDR_Log"}'"
    endif

end prefetch block

if {parameter "empty_packages" = "true"}
    exit 1
endif

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart
]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "bpftool" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "bpftool" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-abi-whitelists" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it AND (not exists package "kernel-abi-whitelists" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it))  OR (exists package "kernel-debug" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-debug" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-debug-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-debug-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-doc" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it AND (not exists package "kernel-doc" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it))  OR (exists package "kernel-headers" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-headers" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-tools" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-tools-libs" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools-libs" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "kernel-tools-libs-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools-libs-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))  OR (exists package "python-perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "python-perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) ) of rpm OR ((rpm package version record (parenthesized part 1 of it) < rpm package version record "3.10.0-1160.76.1.el7") and (parenthesized part 2 of it = "x86_64")) of first match (regex "^(.+)\.([^\.]+)$") of release of operating system)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:5937 - Kernel Security and Bug Fix Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22593701" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "bpftool" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "bpftool" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "bpftool-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t1" = "{if (exists package "kernel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "kernel-abi-whitelists" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "kernel-abi-whitelists" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm) then "kernel-abi-whitelists-3.10.0-1160.76.1.el7.noarch" else ""}"
    parameter "t3" = "{if (exists package "kernel-debug" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-debug" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-debug-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "kernel-debug-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-debug-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-debug-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "kernel-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t6" = "{if (exists package "kernel-doc" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm AND NOT exists package "kernel-doc" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of rpm) then "kernel-doc-3.10.0-1160.76.1.el7.noarch" else ""}"
    parameter "t7" = "{if (exists package "kernel-headers" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-headers" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-headers-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "kernel-tools" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t9" = "{if (exists package "kernel-tools-libs" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools-libs" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-libs-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "kernel-tools-libs-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "kernel-tools-libs-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "kernel-tools-libs-devel-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "perf-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "t12" = "{if (exists package "python-perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm AND NOT exists package "python-perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of rpm) then "python-perf-3.10.0-1160.76.1.el7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12"}"
    

    if {parameter "packages" as trimmed string != ""}
        parameter "empty_packages" = "false"
        parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
        parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
        parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

        if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

            if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
                add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
                collect prefetch items
                execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                    if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                        add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                        collect prefetch items

                        execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                    endif
                endif

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

                if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
                endif
            endif
        endif
    else
        parameter "empty_packages" = "true"
        if {not exists folder (parameter "EDR_DeployDataDir")}
            execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
        endif
        execute prefetch plug-in "/bin/bash" -c "echo [{now}] {parameter "fixletid"} Warning: Nothing to install. Please check if you are using the latest kernel. >> '{parameter "EDR_Log"}'"
    endif
end prefetch block

if {parameter "empty_packages" = "true"}
    exit 1
endif

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart
]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "bpftool" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "bpftool" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-abi-whitelists" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it AND (not exists package "kernel-abi-whitelists" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it)) OR (exists package "kernel-debug" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-debug" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-debug-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-debug-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-doc" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it AND (not exists package "kernel-doc" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "noarch") of it)) OR (exists package "kernel-headers" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-headers" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-tools" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-tools-libs" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools-libs" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "kernel-tools-libs-devel" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "kernel-tools-libs-devel" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it)) OR (exists package "python-perf" whose (rpm version record of it < rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it AND (not exists package "python-perf" whose (rpm version record of it >= rpm package version record "3.10.0-1160.76.1.el7" AND architecture of it = "x86_64") of it))) of rpm OR ((rpm package version record (parenthesized part 1 of it) < rpm package version record "3.10.0-1160.76.1.el7") and (parenthesized part 2 of it = "x86_64")) of first match (regex "^(.+)\.([^\.]+)$") of release of operating system)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:6160 - Systemd Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22616001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm AND NOT exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm) then "libgudev1-219-78.el7_9.7.i686" else ""}"
    parameter "t1" = "{if (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "libgudev1-219-78.el7_9.7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm AND NOT exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm) then "libgudev1-devel-219-78.el7_9.7.i686" else ""}"
    parameter "t3" = "{if (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "libgudev1-devel-219-78.el7_9.7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "systemd" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-219-78.el7_9.7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm) then "systemd-devel-219-78.el7_9.7.i686" else ""}"
    parameter "t6" = "{if (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-devel-219-78.el7_9.7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "systemd-journal-gateway" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-journal-gateway" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-journal-gateway-219-78.el7_9.7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm) then "systemd-libs-219-78.el7_9.7.i686" else ""}"
    parameter "t9" = "{if (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-libs-219-78.el7_9.7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "systemd-networkd" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-networkd" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-networkd-219-78.el7_9.7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "systemd-python" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-python" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-python-219-78.el7_9.7.x86_64" else ""}"
    parameter "t12" = "{if (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of rpm) then "systemd-resolved-219-78.el7_9.7.i686" else ""}"
    parameter "t13" = "{if (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-resolved-219-78.el7_9.7.x86_64" else ""}"
    parameter "t14" = "{if (exists package "systemd-sysv" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-sysv" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of rpm) then "systemd-sysv-219-78.el7_9.7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it AND (not exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it))  OR (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it AND (not exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it))  OR (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it AND (not exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it))  OR (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-journal-gateway" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-journal-gateway" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it AND (not exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it))  OR (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-networkd" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-networkd" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-python" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-python" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it AND (not exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "i686") of it))  OR (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it))  OR (exists package "systemd-sysv" whose (rpm version record of it < rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-sysv" whose (rpm version record of it >= rpm package version record "219-78.el7_9.7" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:6160 - Systemd Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22616001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm AND NOT exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm) then "libgudev1-219-78.el7.centos.7.i686" else ""}"
    parameter "t1" = "{if (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "libgudev1-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t2" = "{if (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm AND NOT exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm) then "libgudev1-devel-219-78.el7.centos.7.i686" else ""}"
    parameter "t3" = "{if (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "libgudev1-devel-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t4" = "{if (exists package "systemd" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t5" = "{if (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm) then "systemd-devel-219-78.el7.centos.7.i686" else ""}"
    parameter "t6" = "{if (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-devel-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t7" = "{if (exists package "systemd-journal-gateway" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-journal-gateway" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-journal-gateway-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t8" = "{if (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm) then "systemd-libs-219-78.el7.centos.7.i686" else ""}"
    parameter "t9" = "{if (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-libs-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t10" = "{if (exists package "systemd-networkd" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-networkd" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-networkd-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t11" = "{if (exists package "systemd-python" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-python" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-python-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t12" = "{if (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm AND NOT exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of rpm) then "systemd-resolved-219-78.el7.centos.7.i686" else ""}"
    parameter "t13" = "{if (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-resolved-219-78.el7.centos.7.x86_64" else ""}"
    parameter "t14" = "{if (exists package "systemd-sysv" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm AND NOT exists package "systemd-sysv" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of rpm) then "systemd-sysv-219-78.el7.centos.7.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3" & " " & parameter "t4" & " " & parameter "t5" & " " & parameter "t6" & " " & parameter "t7" & " " & parameter "t8" & " " & parameter "t9" & " " & parameter "t10" & " " & parameter "t11" & " " & parameter "t12" & " " & parameter "t13" & " " & parameter "t14"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

action requires restart
]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it AND (not exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it)) OR (exists package "libgudev1" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "libgudev1" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it AND (not exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it)) OR (exists package "libgudev1-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "libgudev1-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it AND (not exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it)) OR (exists package "systemd-devel" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-devel" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-journal-gateway" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-journal-gateway" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it AND (not exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it)) OR (exists package "systemd-libs" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-libs" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-networkd" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-networkd" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-python" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-python" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it AND (not exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "i686") of it)) OR (exists package "systemd-resolved" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-resolved" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it)) OR (exists package "systemd-sysv" whose (rpm version record of it < rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it AND (not exists package "systemd-sysv" whose (rpm version record of it >= rpm package version record "219-78.el7.centos.7" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:6170 - Rsync Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22617001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rsync" whose (rpm version record of it < rpm package version record "3.1.2-11.el7_9" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsync" whose (rpm version record of it >= rpm package version record "3.1.2-11.el7_9" AND architecture of it = "x86_64") of rpm) then "rsync-3.1.2-11.el7_9.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "rsync" whose (rpm version record of it < rpm package version record "3.1.2-11.el7_9" AND architecture of it = "x86_64") of it AND (not exists package "rsync" whose (rpm version record of it >= rpm package version record "3.1.2-11.el7_9" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="CESA-2022:6170 - Rsync Security Update - CentOS 7 x86_64" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforcentos7pluginr2" SourceID="22617001" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
        parameter "debug_level" = "10"
    else
        parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for centos7 plugin r2" and "superseded" is not contained by name of it as lowercase)}"

    parameter "centosclient_name" = "centos-client{if((exists match (regex "x86_64") of it) of architecture of operating system) then "-x64" else "-x32"}"
    parameter "centosclient_source" = "{parameter "sitefolder"}/{parameter "centosclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "centosclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "centosclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "centosclient_source"}' '{parameter "centosclient_folder"}'"

        parameter "centosclient" = "{parameter "centosclient_folder"}/{parameter "centosclient_name"}"
    else
        parameter "centosclient_folder" = "{parameter "sitefolder"}"
        parameter "centosclient" = "{parameter "centosclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "centosclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-centosplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-centosplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // centosclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // centosclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/centosr2yum"
    else
        parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/centosr2yum"
    endif
    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // centosclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // centosclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "rsync" whose (rpm version record of it < rpm package version record "3.1.2-11.el7.centos" AND architecture of it = "x86_64") of rpm AND NOT exists package "rsync" whose (rpm version record of it >= rpm package version record "3.1.2-11.el7.centos" AND architecture of it = "x86_64") of rpm) then "rsync-3.1.2-11.el7.centos.x86_64" else ""}"
    parameter "packages" = "{parameter "t0"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
            add nohash prefetch item name=repolist.json url=CentOSR2Protocol://get.repo.list.content/centos/7/x64
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif
end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_CentOS_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "centosclient_folder"}' '{parameter "centosclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif


]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2.1175") AND (name of operating system starts with "Linux CentOS 7")) AND (architecture of operating system = "x86_64")) AND (((exists package "rsync" whose (rpm version record of it < rpm package version record "3.1.2-11.el7.centos" AND architecture of it = "x86_64") of it AND (not exists package "rsync" whose (rpm version record of it >= rpm package version record "3.1.2-11.el7.centos" AND architecture of it = "x86_64") of it))) of rpm)]]></Relevance>
                </BaselineComponent>
                <BaselineComponent Name="RHSA-2022:6381 - Open-Vm-Tools Security Update - Red Hat Enterprise Linux 7 (x86_64)" IncludeInRelevance="true" SourceSiteURL="http://sync.bigfix.com/cgi-bin/bfgather/patchesforrhel7" SourceID="22638101" ActionName="Action1">
                    <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[begin prefetch block
    // 10 for debug, 20 for normal execution
    if {exists setting "_BESClient_LinuxPatch_enable_debug_log" whose (value of it = "1") of client}
      parameter "debug_level" = "10"
    else
      parameter "debug_level" = "20"
    endif

    parameter "timeout_setting" = "{if exists setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" whose (exists value of it) of client then value of setting "_BESClient_ActionManager_PrefetchPlugInTimeoutSeconds" of client else "60"}"

    parameter "sitefolder" = "{client folder of site whose (name of it as lowercase starts with "patches for rhel 7" and "superseded" is not contained by name of it as lowercase)}"

    parameter "rhelclient_name" = "redhat-client-x64"
    parameter "rhelclient_source" = "{parameter "sitefolder"}/{parameter "rhelclient_name"}"

    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_executable_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
        parameter "rhelclient_folder" = "{value of setting "_BESClient_LinuxPatch_executable_directory" of client}/bigfixpatch"
        execute prefetch plug-in "/bin/bash" -c "rm -rf '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "rhelclient_folder"}'"
        execute prefetch plug-in "/bin/bash" -c "cp -f '{parameter "rhelclient_source"}' '{parameter "rhelclient_folder"}'"

        parameter "rhelclient" = "{parameter "rhelclient_folder"}/{parameter "rhelclient_name"}"
    else
        parameter "rhelclient_folder" = "{parameter "sitefolder"}"
        parameter "rhelclient" = "{parameter "rhelclient_source"}"
    endif

    execute prefetch plug-in "/bin/bash" -c "chmod +x '{parameter "rhelclient"}'"
    parameter "yumplugin_config" = "{parameter "sitefolder"}/yum-rhsmplugin.conf"
    parameter "yumplugin" = "{parameter "sitefolder"}/yum-rhsmplugin.py"
    parameter "EDR_DeployDataDir" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/EDRDeployData/"
    execute prefetch plug-in "/bin/bash" -c "mkdir -p '{parameter "EDR_DeployDataDir"}'"
    parameter "cwd" = "{parameter "EDR_DeployDataDir"}"

    // rhelclient global options
    parameter "fixletid" = "{origin fixlet id of action as string}"
    parameter "EDR_Log" = "{parameter "cwd"}/EDR_DeploymentResults.txt"
    parameter "EDR_RepoList" = "{parameter "cwd"}/EDR_RepoList_{parameter "fixletid"}"
    parameter "EDR_ExitCode" = "{parameter "cwd"}/EDR_ExitCode_{parameter "fixletid"}"

    // rhelclient setup options
    // only accept absolute path with alphanumeric and underscore characters
    if {exists setting "_BESClient_LinuxPatch_metadata_directory" whose (exists match (regex "^\/[a-z|A-Z|0-9|\/|_]*$") of value of it) of client}
      parameter "EDR_YumFolder" = "{value of setting "_BESClient_LinuxPatch_metadata_directory" of client}/rhsmyum"
    else
      parameter "EDR_YumFolder" = "{if(exist property "storage folder") then pathname of storage folder of client else pathname of client folder of current site & "/../.."}/rhsmyum"
    endif

    parameter "EDR_Yumconfig" = "{parameter "cwd"}/EDR_Yumconfig_{parameter "fixletid"}"
    parameter "EDR_RepomdRequest" = "{parameter "cwd"}/EDR_RepomdRequest_{parameter "fixletid"}"
    parameter "EDR_RepomdMapping" = "{parameter "cwd"}/EDR_RepomdMapping_{parameter "fixletid"}"
    parameter "EDR_RepoRefresh" = "{parameter "cwd"}/EDR_RepoRefresh_{parameter "fixletid"}"

    // rhelclient request_metadata options
    parameter "EDR_MetadataRequest" = "{parameter "cwd"}/EDR_MetadataRequest_{parameter "fixletid"}"
    parameter "EDR_MetadataMapping" = "{parameter "cwd"}/EDR_MetadataMapping_{parameter "fixletid"}"

    // rhelclient dependency_resolution options
    parameter "EDR_PkgRequest" = "{parameter "cwd"}/EDR_PkgRequest_{parameter "fixletid"}"
    parameter "EDR_PkgMapping" = "{parameter "cwd"}/EDR_PkgMapping_{parameter "fixletid"}"

    parameter "t0" = "{if (exists package "open-vm-tools" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm AND NOT exists package "open-vm-tools" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm) then "open-vm-tools-11.0.5-3.el7_9.4.x86_64" else ""}"
    parameter "t1" = "{if (exists package "open-vm-tools-desktop" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm AND NOT exists package "open-vm-tools-desktop" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm) then "open-vm-tools-desktop-11.0.5-3.el7_9.4.x86_64" else ""}"
    parameter "t2" = "{if (exists package "open-vm-tools-devel" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm AND NOT exists package "open-vm-tools-devel" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm) then "open-vm-tools-devel-11.0.5-3.el7_9.4.x86_64" else ""}"
    parameter "t3" = "{if (exists package "open-vm-tools-test" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm AND NOT exists package "open-vm-tools-test" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of rpm) then "open-vm-tools-test-11.0.5-3.el7_9.4.x86_64" else ""}"
    parameter "packages" = "{parameter "t0" & " " & parameter "t1" & " " & parameter "t2" & " " & parameter "t3"}"
    

    parameter "outputfile" = "{parameter "EDR_DeployDataDir"}/MultiPkgInstall.txt"
    parameter "flag" = "{parameter "cwd"}/{name of current site}-MultiPkgInstallFlag.txt"
    parameter "expire_timestamp" = "{(line 1 of file (parameter "flag")) | (now - 10*minute) as string}"

    if {not (value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction") or (parameter "expire_timestamp") as time < now}

        if {not exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Server release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/server/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Client release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/client/7/x86_64
            endif
            if {(exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux Workstation release 7") of it) of it))}
                add nohash prefetch item name=repolist.json url=RHSMProtocol://get.repo.list.content/workstation/7/x86_64
            endif
            
            
            collect prefetch items
            execute prefetch plug-in "/bin/bash" -c "cp -f '{download folder}'/repolist.json '{parameter "EDR_RepoList"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' setup --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_RepomdRequest"}' --dl_mapping '{parameter "EDR_RepomdMapping"}' --yumconfig '{parameter "EDR_Yumconfig"}' --yumplugin_config '{parameter "yumplugin_config"}' --yumplugin '{parameter "yumplugin"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

            if { (number of lines of file (parameter "EDR_RepomdRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file (parameter "EDR_RepomdRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_RepomdMapping"}'"

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' request_metadata --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --dl_requests '{parameter "EDR_MetadataRequest"}' --dl_mapping '{parameter "EDR_MetadataMapping"}' --repo_refresh '{parameter "EDR_RepoRefresh"}'"

                if { (number of lines of file (parameter "EDR_MetadataRequest") | 0 ) > 0 }
                    add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_MetadataRequest")}
                    collect prefetch items

                    execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_MetadataMapping"}'"
                endif
            endif

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' lock --yumcache '{parameter "EDR_YumFolder"}'"

            execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' dependency_resolution --timeout '{parameter "timeout_setting"}' --repos '{parameter "EDR_RepoList"}' --yumcache '{parameter "EDR_YumFolder"}' --yumconfig '{parameter "EDR_Yumconfig"}' --dl_requests '{parameter "EDR_PkgRequest"}' --dl_mapping '{parameter "EDR_PkgMapping"}' --yum_cmd 'install' {parameter "packages"}"

            if { (number of lines of file (parameter "EDR_PkgRequest") | 0 ) > 0 }
                add prefetch item {concatenation " ; " of lines of file  (parameter "EDR_PkgRequest")}
                collect prefetch items

                execute prefetch plug-in "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' copy_downloads --download_folder '{download folder}' --dl_mapping '{parameter "EDR_PkgMapping"}'"
            endif
        endif
    endif

end prefetch block

if {value of (headers of action) whose (name of it = "X-Action-Component-Type") equals "Group SubAction" and (parameter "expire_timestamp") as time >= now}
    wait "/bin/bash" -c "mkdir -p '{parameter "cwd"}'"
    wait "/bin/bash" -c "echo {parameter "packages"} >> '{parameter "outputfile"}'"

    if {(parameter "expire_timestamp") as time < now + 2*minute }
        wait "/bin/bash" -c "echo {(parameter "expire_timestamp") as time + 1*minute } > '{parameter "flag"}'"
    endif
else
    if {exists setting "_BESClient_RHEL_AllowYumDownloads" whose (value of it = "1") of client}
        delete "{parameter "EDR_Yumconfig"}"
    endif

    wait "/bin/bash" -c "TMPDIR='{parameter "rhelclient_folder"}' '{parameter "rhelclient"}' --log_level '{parameter "debug_level"}' --id '{parameter "fixletid"}' --exit_code_file '{parameter "EDR_ExitCode"}' --log_file '{parameter "EDR_Log"}' yum_run --yumconfig '{parameter "EDR_Yumconfig"}' --yum_cmd 'install' {parameter "packages"}"
    parameter "exit_code" = "{line 1 of file (parameter "EDR_ExitCode")}"

    // cleanup
    if {(parameter "debug_level") as integer >= 20}
        delete "{parameter "EDR_RepoList"}"
        delete "{parameter "EDR_ExitCode"}"
        delete "{parameter "EDR_Yumconfig"}"
        delete "{parameter "EDR_RepomdRequest"}"
        delete "{parameter "EDR_RepomdMapping"}"
        delete "{parameter "EDR_RepoRefresh"}"
        delete "{parameter "EDR_MetadataRequest"}"
        delete "{parameter "EDR_MetadataMapping"}"
        delete "{parameter "EDR_PkgRequest"}"
        delete "{parameter "EDR_PkgMapping"}"
    endif

    if {parameter "exit_code" != "0"}
        exit {(parameter "exit_code") as integer}
    endif

endif

]]>                    </ActionScript>
                    <SuccessCriteria Option="OriginalRelevance"></SuccessCriteria>
                    <Relevance><![CDATA[(((version of client >= "8.2") AND (name of operating system starts with "Linux Red Hat") AND ((it = "x86_64") of architecture of operating system) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it) AND NOT exists file "/etc/vmware-release" whose (exists line whose (it contains "VMware ESX") of it) AND NOT exists file "/etc/enterprise-release" whose (exists line whose (it contains "Enterprise Linux Enterprise Linux") of it)) AND (if exists property "in proxy agent context" then (not in proxy agent context) else true) AND (if exists property "android" of type "operating system" then (not android of operating system) else true)) AND (((exists package "open-vm-tools" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it AND (not exists package "open-vm-tools" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it))  OR (exists package "open-vm-tools-desktop" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it AND (not exists package "open-vm-tools-desktop" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it))  OR (exists package "open-vm-tools-devel" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it AND (not exists package "open-vm-tools-devel" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it))  OR (exists package "open-vm-tools-test" whose (rpm version record of it < rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it AND (not exists package "open-vm-tools-test" whose (rpm version record of it >= rpm package version record "11.0.5-3.el7_9.4" AND architecture of it = "x86_64") of it)) ) of rpm)) AND (exists file "/etc/redhat-release" whose (exists line whose (exists match (regex "Red Hat Enterprise Linux (Client|Server|Workstation) release 7") of it) of it))]]></Relevance>
                </BaselineComponent>
            </BaselineComponentGroup>
        </BaselineComponentCollection>
    </Baseline>
</BES>
